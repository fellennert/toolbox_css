{
  "hash": "65264da383d2905b8ced52bb9ce2d1bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 5: `pandas`\"\npublished-title: pandas\nengine: knitr\nfreeze: auto\nbibliography: literature.bib\ncsl: ASA.csl\n---\n\n\n\n## `pandas`\n\nNow that you understand Python basics, let's look at `pandas` -- Python's most popular library for data manipulation. If you're familiar with R's tidyverse (especially `dplyr` and `tidyr`), `pandas` will feel conceptually familiar, though the syntax differs.\n\n### What is Pandas?\n\n`pandas` provides two main data structures:\n\n- `Series`: Like an R vector or a single column\n- `DataFrame`: Like an R tibble/data.frame\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd  # Standard convention: import pandas as pd -- equivalent to library(tidyverse)\nimport numpy as np   # NumPy often used alongside pandas\n\n# Check version\npd.__version__\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'2.3.1'\n```\n\n\n:::\n:::\n\n\n### Creating DataFrames\n\nYou can create DataFrames in several ways:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# From a dictionary (like tibble() in R)\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Charlie', 'Diana'],\n    'age': [25, 30, 35, 28],\n    'city': ['New York', 'London', 'Paris', 'Tokyo']\n})\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name  age      city\n0    Alice   25  New York\n1      Bob   30    London\n2  Charlie   35     Paris\n3    Diana   28     Tokyo\n```\n\n\n:::\n\n```{.python .cell-code}\n# from a list of dictionaries\ndata = [\n    {'name': 'Alice', 'age': 25, 'city': 'New York'},\n    {'name': 'Bob', 'age': 30, 'city': 'Paris'},\n    {'name': 'Charlie', 'age': 35, 'city': 'London'}\n]\ndf = pd.DataFrame(data)\n\n# from a list of lists (specify column names)\ndata = [\n    ['Alice', 25, 'New York'],\n    ['Bob', 30, 'Paris'],\n    ['Charlie', 35, 'London']\n]\ndf = pd.DataFrame(data, columns=['name', 'age', 'city'])\n\n# from a numpy array (essentially a matrix, specify column names)\nimport numpy as np\n\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n```\n\n\n:::\n\n```{.python .cell-code}\ndf = pd.DataFrame(data, columns=['A', 'B', 'C'])\n```\n:::\n\n\n\n::: {.callout-tip title=\"Compared to R\"}\nrdf <- tibble(\n  name = c('Alice', 'Bob', 'Charlie', 'Diana'),\n  age = c(25, 30, 35, 28),\n  city = c('New York', 'London', 'Paris', 'Tokyo')\n)\n::: \n\n### Basic DataFrame Operations\n\n`pandas` works through methods rather than functions. Methods are attached to specific object types. A string has string methods, a list has list methods, a DataFrame has DataFrame methods.\n\nThere are several differences:\n\n- Functions are called by putting the object as an argument:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Function syntax: function(object, arguments)\nmy_list = [3, 1, 4, 1, 5]\nlen(my_list)        # len is a function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n5\n```\n\n\n:::\n\n```{.python .cell-code}\nsorted(my_list)     # sorted is a function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1, 1, 3, 4, 5]\n```\n\n\n:::\n:::\n\n\n- Methods are functions that \"belong to\" an object and are called using dot notation:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Method syntax: object.method(arguments)\nmy_string = \"hello world\"\nmy_string.upper()      # upper() is a method of strings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'HELLO WORLD'\n```\n\n\n:::\n\n```{.python .cell-code}\nmy_string.split()      # split() is a method of strings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['hello', 'world']\n```\n\n\n:::\n\n```{.python .cell-code}\nmy_string              # object remains unchanged\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'hello world'\n```\n\n\n:::\n\n```{.python .cell-code}\nmy_list.append(9)      # append() is a method of lists; note that this modifies the list in place\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[3, 1, 4, 1, 5, 9]\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip title=\"Compared to R\"}\nR primarily uses functions - you write head(df), nrow(df), names(df). Python often uses methods - you write df.head(), df.shape, df.columns.\n::: \n\nThis matters for pandas, since almost everything is a method and hence the syntax differs significantly.\n\n### `pandas` in action\n\nViewing Data (note that objects remain unchanged):\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Charlie', 'Diana'],\n    'age': [25, 30, 35, 28],\n    'city': ['New York', 'London', 'Paris', 'Tokyo']\n})\n\n# First few rows (like head() in R)\ndf.head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    name  age      city\n0  Alice   25  New York\n1    Bob   30    London\n```\n\n\n:::\n\n```{.python .cell-code}\n# Last few rows (like tail() in R)\ndf.tail(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name  age   city\n2  Charlie   35  Paris\n3    Diana   28  Tokyo\n```\n\n\n:::\n\n```{.python .cell-code}\n# Info about the DataFrame (like glimpse() or str() in R)\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4 entries, 0 to 3\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   name    4 non-null      object\n 1   age     4 non-null      int64 \n 2   city    4 non-null      object\ndtypes: int64(1), object(2)\nmemory usage: 224.0+ bytes\n```\n\n\n:::\n\n```{.python .cell-code}\n# Summary statistics (like summary() in R)\ndf.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             age\ncount   4.000000\nmean   29.500000\nstd     4.203173\nmin    25.000000\n25%    27.250000\n50%    29.000000\n75%    31.250000\nmax    35.000000\n```\n\n\n:::\n:::\n\n\nSelecting Columns:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Select single column (returns a Series)\ndf['name']           # in R: df$name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0      Alice\n1        Bob\n2    Charlie\n3      Diana\nName: name, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\n# Select single column (returns a DataFrame)\ndf[['name']]         # in R: df |> select(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name\n0    Alice\n1      Bob\n2  Charlie\n3    Diana\n```\n\n\n:::\n\n```{.python .cell-code}\n# Select multiple columns (returns a DataFrame)\ndf[['name', 'age']]  # in R: df |> select(name, age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name  age\n0    Alice   25\n1      Bob   30\n2  Charlie   35\n3    Diana   28\n```\n\n\n:::\n:::\n\n\n\nFiltering Rows:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Filter rows where age > 28\ndf[df['age'] > 28]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name  age    city\n1      Bob   30  London\n2  Charlie   35   Paris\n```\n\n\n:::\n\n```{.python .cell-code}\n# Multiple conditions (use & for AND, | for OR)\ndf[(df['age'] > 25) & (df['city'] == 'London')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  age    city\n1  Bob   30  London\n```\n\n\n:::\n:::\n\n\n\nAdding New Columns\n\n::: {.cell}\n\n```{.python .cell-code}\n# Add a new column (like mutate() in R)\ndf['age_in_months'] = df['age'] * 12    # in R: df$age_in_months <- df$age * 12\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name  age      city  age_in_months\n0    Alice   25  New York            300\n1      Bob   30    London            360\n2  Charlie   35     Paris            420\n3    Diana   28     Tokyo            336\n```\n\n\n:::\n:::\n\n\nSorting:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Sort by age (like arrange() in R)\ndf.sort_values('age')                    # in R: df |> arrange(age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name  age      city  age_in_months\n0    Alice   25  New York            300\n3    Diana   28     Tokyo            336\n1      Bob   30    London            360\n2  Charlie   35     Paris            420\n```\n\n\n:::\n\n```{.python .cell-code}\n# Sort descending\ndf.sort_values('age', ascending=False)   # in R: df |> arrange(desc(age))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      name  age      city  age_in_months\n2  Charlie   35     Paris            420\n1      Bob   30    London            360\n3    Diana   28     Tokyo            336\n0    Alice   25  New York            300\n```\n\n\n:::\n:::\n\n\nRead in Data:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Read CSV (like read_csv() in R)\nimdb_df = pd.read_csv('data/imdb2006-2016.csv')\nimdb_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Rank                    Title  ... Revenue (Millions) Metascore\n0     1  Guardians of the Galaxy  ...             333.13      76.0\n1     2               Prometheus  ...             126.46      65.0\n2     3                    Split  ...             138.12      62.0\n3     4                     Sing  ...             270.32      59.0\n4     5            Suicide Squad  ...             325.02      40.0\n\n[5 rows x 12 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\n# Read Excel\npublishers_df = pd.read_excel('data/publishers_with_places.xlsx')\npublishers_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        publisher               city\n0    37 ink atria  New York City, NY\n1          abrams  New York City, NY\n2             ace  New York City, NY\n3  alfred a knopf  New York City, NY\n4       algonquin    Chapel Hill, NC\n```\n\n\n:::\n\n```{.python .cell-code}\n# Read from URL\ndf_example = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv')\ndf_example.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   total_bill   tip     sex smoker  day    time  size\n0       16.99  1.01  Female     No  Sun  Dinner     2\n1       10.34  1.66    Male     No  Sun  Dinner     3\n2       21.01  3.50    Male     No  Sun  Dinner     3\n3       23.68  3.31    Male     No  Sun  Dinner     2\n4       24.59  3.61  Female     No  Sun  Dinner     4\n```\n\n\n:::\n:::\n\n\nQuick Data Exploration:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Shape (rows, columns)\ndf_example.shape                                  # in R: dim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(244, 7)\n```\n\n\n:::\n\n```{.python .cell-code}\n# Column names \ndf_example.columns.tolist()                       # in R: colnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['total_bill', 'tip', 'sex', 'smoker', 'day', 'time', 'size']\n```\n\n\n:::\n\n```{.python .cell-code}\n# Value counts\ndf_example['day'].value_counts()                  # in R: df |> count(day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nday\nSat     87\nSun     76\nThur    62\nFri     19\nName: count, dtype: int64\n```\n\n\n:::\n\n```{.python .cell-code}\n# Group by and aggregate\ndf_example.groupby('day')['total_bill'].mean()    # in R: df |> group_by(day) |> summarize(mean_bill = mean(total_bill))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nday\nFri     17.151579\nSat     20.441379\nSun     21.410000\nThur    17.682742\nName: total_bill, dtype: float64\n```\n\n\n:::\n:::\n\n\n### Method Chaining\n`pandas` supports method chaining (similar to the pipe `|>`/`%>%` in R):\n\n::: {.cell}\n\n```{.python .cell-code}\n# Chain multiple operations\nresult = (df_example\n    .query('total_bill > 20')  # Filter\n    .assign(tip_pct = lambda x: x['tip'] / x['total_bill'])  # New column\n    .sort_values('tip_pct', ascending=False)  # Sort\n    .head(5)  # Top 5\n)\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     total_bill   tip     sex smoker   day    time  size   tip_pct\n183       23.17  6.50    Male    Yes   Sun  Dinner     4  0.280535\n181       23.33  5.65    Male    Yes   Sun  Dinner     2  0.242177\n185       20.69  5.00    Male     No   Sun  Dinner     5  0.241663\n88        24.71  5.85    Male     No  Thur   Lunch     2  0.236746\n214       28.17  6.50  Female    Yes   Sat  Dinner     3  0.230742\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip title=\"Compared to R\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- df_example |>\n  filter(total_bill > 20) |>\n  mutate(tip_pct = tip / total_bill) |>\n  arrange(desc(tip_pct)) |>\n  slice(5)\n```\n:::\n\n\n::: \n\n### Key Differences between `pandas` and R\n\n- Indexing: `pandas` uses 0-based indexing\n- Missing values: `pandas` uses NaN (from NumPy), not NA\n- Syntax: Methods instead of functions (e.g., df.head() not head(df))\n\nThere is one important pitfall you need to pay attention to: `pandas` modifies in place unless you use `.copy()`!\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n# This creates a reference, NOT a copy\ndf2 = df\n\n# Modify df2\ndf2['A'] = [10, 20, 30]\n\n# Surprise! df is also changed\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A  B\n0  10  4\n1  20  5\n2  30  6\n```\n\n\n:::\n\n```{.python .cell-code}\n### FIX\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n# This creates a copy, NOT a reference\ndf2 = df.copy()\n\n# Modify df2\ndf2['A'] = [10, 20, 30]\n\n# thank god! df did not change\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   A  B\n0  1  4\n1  2  5\n2  3  6\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A  B\n0  10  4\n1  20  5\n2  30  6\n```\n\n\n:::\n:::\n\n\n## Further Resources\n\n- A very helpful [R vs. `pandas` cheatsheet](https://github.com/meganzhou62/stat5702cc/blob/main/cheatsheet.pdf)\n- [Python for Data Analysis](https://wesmckinney.com/book/) by Wes McKinney (`pandas` creator)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}