{
  "hash": "99dc9f599e6114d0fd27f2dec3b45837",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 2: Brief R Recap\"\npublished-title: r_recap\nengine: knitr\nfreeze: auto\nbibliography: literature.bib\ncsl: ASA.csl\n---\n\nI assume your familiarity with R. However, I am fully aware that nobody can have all these things avaible in their head all the time (that's what they invented StackOverflow for, new AI helpers are also pretty good). In the following, I show some basics of how I use R (i.e., RStudio Projects, scripts, Quarto) as well as some data wrangling stuff (`readr`, `tidyr`, `dplyr`), visualization with `ggplot2`, functions, loops, and `purrr`. If you need more info, check out the \"further links\" I have added after each section. There are also exercises after each section.\n\nYou can find the files for this chapter in the [GitHub repository](https://github.com/fellennert/toolbox_css/tree/main/data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneeds(tidyverse, lubridate, fs, socviz)\n```\n:::\n\n\nOne quick thing upfront: AI coding helpers have become increasingly popular. You can, for instance, use GitHub Copilot in RStudio (if you have access to it) or ChatGPT/Claude (the free versions are already pretty good). However, please note that those tools are not perfect and can produce wrong code. Hence, you need to understand what they do and check the code they provide you with. If you do not understand what a piece of code does, do not use it. If you want to learn R properly, I strongly recommend you to try to write the code yourself first and only use those tools if you get stuck.\n\n## RStudio Projects\n\n### Motivation\n\nDisclaimer: those things might not be entirely clear right away. However, I am deeply convinced that it is important that you use R and RStudio properly from the start. Otherwise it won't be as easy to re-build the right habits.\n\nIf you analyze data with R, one of the first things you do is to load in the data that you want to perform your analyses on. Then, you perform your analyses on them, and save the results in the (probably) same directory.\\\nWhen you load a data set into R, you might use the `readr` package and do `read_csv(absolute_file_path.csv)`. This becomes fairly painful if you need to read in more than one data set. Then, relative paths (i.e., where you start from a certain point in your file structure, e.g., your file folder) become more useful. How you CAN go across this is to use the `setwd(absolute_file_path_to_your_directory)` function. Here, `set` stands for set and `wd` stands for working directory. If you are not sure about what the current working directory actually is, you can use `getwd()` which is the equivalent to `setwd(file_path)`. This enables you to read in a data set -- if the file is in the working directory -- by only using `read_csv(file_name.csv)`.\\\nHowever, if you have ever worked on an R project with other people in a group and exchanged scripts regularly, you may have encountered one of the big problems with this `setwd(file_path)` approach: as it only takes absolute paths like this one: \"/Users/felixlennert/Library/Mobile Documents/com~apple~CloudDocs/phd/teaching/hhs-stockholm/fall2021/scripts/\", no other person will be able to run this script without making any changes[^catch-up-1]. Just to be clear: there are no two machines which have the exact same file structure.\n\n[^catch-up-1]: This becomes especially painful if you teach R to your students and have to grade 20 submissions and, hence, have to paste your personal directory's file path into each of these submissions.\n\nThis is where RStudio Projects come into play: they make every file path relative. The Project file (ends with .Rproj) basically sets the working directory to the folder it is in. Hence, if you want to send your work to a peer or a teacher, just send a folder which also contains the .Rproj file and they will be able to work on your project without the hassle of pasting file paths into `setwd()` commands.\n\n### How to create an RStudio Project?\n\nI strongly suggest that you set up a project which is dedicated to this course.\n\n1.  In RStudio, click File \\>\\> New Project...\n2.  A window pops up which lets you select between \"New Directory\", \"Existing Directory\", and \"Version Control.\" The first option creates a new folder which is named after your project, the second one \"associates a project with an existing working directory,\" and the third one only applies to version control (like, for instance, GitHub) users. I suggest that you click \"New Directory\".\n3.  Now you need to specify the type of the project (Empty project, R package, or Shiny Web Application). In our case, you will need a \"new project.\" Hit it!\\\n4.  The final step is to choose the folder the project will live in. If you have already created a folder which is dedicated to this course, choose this one, and let the project live in there as a sub-directory.\n5.  When you write code for our course in the future, you *first* open the R project -- by double-clicking the .Rproj file -- and then create either a new script or open a former one (e.g., by going through the \"Files\" tab in the respective pane which will show the right directory already.)\n\n## R scripts and Quarto\n\nIn this course, you will work with two sorts of documents to store your code in: R scripts (suffix `.R`) and Quarto documents (suffix `.qmd`). In the following, I will briefly introduce you to both of them.\n\n### R scripts\n\nThe console, where you can only execute your code, is great for experimenting with R. If you want to store it -- e.g., for sharing -- you need something different. This is where R scripts come in handy. When you are in RStudio, you create a new script by either clicking `File >> New File >> R Script` or ctrl/cmd+shift+n. There are multiple ways to run code in the script:\n\n-   cmd/ctrl+return (Mac/Windows) -- execute entire expression and jump to next line\\\n-   option/alt+return (Mac/Windows) -- execute entire expression and remain in line\\\n-   cmd/ctrl+shift+return (Mac/Windows) -- execute entire script from the beginning to the end (rule: every script you hand in or send to somebody else should run smoothly from the beginning to the end)\n\nIf you want to make annotations to your code (which you should do because it makes everything easier to read and understand), just insert '\\#' into your code. Every expression that stands to the right of the '\\#' sign will not be executed when you run the code.\n\n### Quarto\n\nA time will come where you will not just do analyses for yourself in R, but you will also have to communicate them. Let's take a master's thesis as an example: you need a type of document that is able to encapsulate: text (properly formatted), visualizations (tables, graphs, maybe images), and references. An RMarkdown document can do it all, plus, your entire analysis can live in there as well. So there is no need anymore for the cumbersome process of copying data from MS Excel or IBM SPSS into an MS Word table. You just tell RMarkdown what it should communicate and what not.\n\nIn the following, I will not provide you with an exhaustive introduction to RMarkdown. Instead, I will focus on getting you started and then referring you to better, more exhaustive resources. It is not that I am too lazy to write a big tutorial, but there are state-of-the-art tutorials and resources (which mainly come straight from people who work on the forefront of the development of these tools) which are available for free. By linking to them, I want to encourage you to get involved and dig into this stuff. So, let's get you started!\n\nYou create a Quarto document file by clicking `File >> New File >> Quarto Document`.... Then, a window pops up that looks like this:\n\n![New Quarto](figures/quarto_new.png)\n\nNote that you could also do a presentation (with the `beamer` package), a `shiny` app, a website (like this one), or use templates. We will focus on simple Quarto documents. Here, you can type in a title, the name(s) of the author(s), and choose the default output format. For now you have to choose one, but later you can switch to one of the others whenever you want to.\n\n-   *HTML* is handy for lightweight, quickly rendered files, or if you want to publish it on a website.\n-   *PDF* is good if you are experienced with LaTeX and want to further modify it in terms of formatting etc., or simply want to get a more formally looking document (I use it if I need to hand in something that is supposed to be graded). If you want to knit to PDF, you need a running LaTeX version on your machine. If you do not have one, I recommend you to install `tinytex.` I linked installation instructions down below.\n-   *Word* puts out an MS Word document -- especially handy if you collaborate with people who are either not experienced in R, like older faculty, or want some parts to be proof-read (remember the Track-Changes function?). Note that you need to have MS Word or LibreOffice installed on your machine.\n\nDid you notice the term render? The logic behind Quarto documents is that you edit them in RStudio and then render them. This means that it calls the `knitr` package. Thereby, all the code you include into the document is executed from scratch. If the code does not work and throws an error, the document will not knit -- hence, it needs to be properly written to avoid head-scratching. The `knitr` package creates a markdown file (suffix: .md). This is then processed by `pandoc`, a universal document converter. The big advantage of this two-step approach is that it enables a wide range of output formats.\n\nFor your first Quarto document, choose HTML and click \"OK\". Then, you see a new plain-text file which looks like this:\n\n![A fresh and clean Quarto document](figures/quarto_empty.png)\n\nThe visual editor is quite similar to what we know from word processing software such as Microsoft Word. I will run you through the features in a quick video.\n\n### Further links\n\n-   Chapter on [Scripts and Projects in R4DS](https://r4ds.hadley.nz/workflow-scripts.html)\n-   More on [RStudio Projects on the posit website](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)\n-   [Chapter on Quarto](https://r4ds.hadley.nz/quarto) in R4DS\n-   All things [Quarto](https://quarto.org/docs/get-started/) on its dedicated website\n-   Yihui Xie published a [manual](https://yihui.org/tinytex/) for installing the `tinytex` package\n\n### Exercises\n\n-   Create a project for this course.\n-   Create a Quarto file to work on the exercises. Add the exercises and answer them *in code* in the document.\n-   Render it. Does it work?\n\n## Reading data into R\n\nData is typically stored in csv-files and can be read in using `readr`. For \"normal,\" comma-separated values `read_csv(\"file_path\")` suffices. Sometimes, a semicolon is used instead of a comma (e.g., in countries that use the commas as a decimal sign). For these files, `read_csv2(\"file_path)` is the way to go.\n\n\n\nIf you encounter other data types, you just need to find the right `tidyverse` package to read the data in. Their syntax will be the same, it will just be the function names that differ.\n\n### Further links\n\n-   the [section on reading in data in R4DS](https://r4ds.hadley.nz/data-import)\n\n### Exercises\n\nFirst, download and extract [the zip file](https://www.dropbox.com/scl/fi/7apmtufeft01h02yip8e6/training-files.zip?rlkey=k86yaijrfmd5oz4her8jks5gs&dl=1) by clicking the link. Then...\n\nRead them in using the right functions. Specify the parameters properly. Hints can be found in `hints.md`. Each file should be stored in an object, names should correspond to the file names.\n\nNote: this is challenging, absolutely. If you have problems, try to google the different functions and think about what the different parameters indicate. If that is to no avail, send me an e-mail. I am very happy to provide you further assistance.\n\n## Tidy data with `tidyr`\n\nBefore you learn how to tidy and wrangle data, you need to know how you want your data set to actually look like, i.e., what the desired outcome of the entire process of tidying your data set is. The `tidyverse` is a collection of packages which share an underlying philosophy: they are tidy. This means, that they (preferably) take tidy data as inputs and output tidy data. In the following, I will, first, introduce you to the concept of tidy data as developed by Hadley Wickham [@wickham_tidy_2014]. Second, `tidyr` is introduced [@wickham_tidyr_2020]. Its goal is to provide you with functions that facilitate tidying data sets. Beyond, I will provide you some examples of how to create tibbles using functions from the `tibble` package [@muller_tibble_2020]. Moreover, the pipe is introduced.\n\nPlease note that tidying and cleaning data are not equivalent: I refer to tidying data as to bringing data in a tidy format. Cleaning data, however, can encompass way more than this: parsing columns in the right format (using `readr`, for instance), imputation of missing values, address the problem of typos, etc.\n\n### The concept of *tidy data*\n\ndata sets can be structured in many ways. To make them tidy, they must be organized in the following way (this is taken from the R for Data Science book [@wickham_data_2016]):\n\n1.  Each variable must have its own column.\\\n2.  Each observation must have its own row.\\\n3.  Each value must have its own cell.\n\nThey can even be boiled further down:\n\n1.  Put each data set in a tibble.\n2.  Put each variable in a column.\n\nThis can also be visually depicted:\n\n![The three rules that make a data set tidy (taken from Wickham and Grolemund 2016: 149)](figures/tidy_data.png)\n\nThis way of storing data has two big advantages:\n\n-   you can easily access, and hence manipulate, variables as vectors\n-   if you perform vectorized operations on the tibble, cases are preserved.\n\n### Making messy data tidy\n\nSo what are the most common problems with data sets? The following list is taken from the `tidyr` vignette[^catch-up-2]:\n\n[^catch-up-2]: which can be found [here](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) or using `vignette(\"tidy-data\", package = \"tidyr\")`\n\n-   Column headers are values, not variable names.\\\n-   Variables are stored in both rows and columns.\\\n-   Multiple variables are stored in one column.\\\n-   Multiple types of observational units are stored in the same table.\\\n-   A single observational unit is stored in multiple tables.\n\nI will go across the former three types of problems, because the latter two require some more advanced data wrangling techniques you haven't learned yet (i.e., functions from the `dplyr` package: `select()`, `mutate()`, `left_join()`, among others).\n\nIn the following, I will provide you with examples on how this might look like and how you can address the respective problem using functions from the `tidyr` package. This will serve as an introduction to the two most important functions of the `tidyr` package: `pivot_longer()` and its counterpart `pivot_wider()`. Beyond that, `separate()` will be introduced as well. At the beginning of every part, I will build the tibble using functions from the tibble package. This should suffice as a quick refresher for and introduction to creating tibbles.\n\n`tidyr` has some more functions in stock. They do not necessarily relate to transforming messy data sets into tidy ones, but also serve you well for some general cleaning tasks. They will be introduced, too.\n\n#### Column headers are values\n\nA data set of this form would look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_value_headers <- tibble(\n  manufacturer = c(\"Audi\", \"BMW\", \"Mercedes\", \"Opel\", \"VW\"),\n  `3 cyl` = sample(20, 5, replace = TRUE),\n  `4 cyl` = sample(50:100, 5, replace = TRUE),\n  `5 cyl` = sample(10, 5, replace = TRUE),\n  `6 cyl` = sample(30:50, 5, replace = TRUE),\n  `8 cyl` = sample(20:40, 5, replace = TRUE),\n  `10 cyl` = sample(10, 5, replace = TRUE),\n  `12 cyl` = sample(20, 5, replace = TRUE),\n  `16 cyl` = rep(0, 5)\n)\n\ntibble_value_headers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 9\n  manufacturer `3 cyl` `4 cyl` `5 cyl` `6 cyl` `8 cyl` `10 cyl` `12 cyl`\n  <chr>          <int>   <int>   <int>   <int>   <int>    <int>    <int>\n1 Audi               2      88       2      41      30        8        1\n2 BMW                5      93       9      49      29        8        7\n3 Mercedes           2      50       6      49      22        2        8\n4 Opel               3      54       3      43      25       10       19\n5 VW                 4      70      10      35      39        3       19\n# ℹ 1 more variable: `16 cyl` <dbl>\n```\n\n\n:::\n:::\n\n\nYou can create a tibble *by column* using the `tibble` function. Column names need to be specified and linked to vectors of either the same length or length one.\n\nThis data set basically consists of three variables: `German car manufacturer`, `number of cylinders`, and `frequency`. To make the data set tidy, it has to consist of three columns depicting the three respective variables. This operation is called pivoting the non-variable columns into two-column key-value pairs. As the data set will thereafter contain fewer columns and more rows than before, it will have become longer (or taller). Hence, the tidyr function is called `pivot_longer()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nger_car_manufacturer_longer <- tibble_value_headers |> \n  pivot_longer(-manufacturer, names_to = \"cylinders\", values_to = \"frequency\")\nger_car_manufacturer_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 3\n   manufacturer cylinders frequency\n   <chr>        <chr>         <dbl>\n 1 Audi         3 cyl             2\n 2 Audi         4 cyl            88\n 3 Audi         5 cyl             2\n 4 Audi         6 cyl            41\n 5 Audi         8 cyl            30\n 6 Audi         10 cyl            8\n 7 Audi         12 cyl            1\n 8 Audi         16 cyl            0\n 9 BMW          3 cyl             5\n10 BMW          4 cyl            93\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\nIn the function call, you need to specify the following: if you were not to use the pipe, the first argument would be the tibble you are manipulating. Then, you look at the column you want to **keep**. Here, it is the car manufacturer. This means that all columns but `manufacturer` will be crammed into two new ones: one will contain the columns' names, the other one their values. How are those new column supposed to be named? That can be specified in the `names_to =` and `values_to =`arguments. Please note that you need to provide them a character vector, hence, surround your parameters with quotation marks. As a rule of thumb for all `tidyverse` packages: If it is a new column name you provide, surround it with quotation marks. If it is one that already exists -- like, here, manufacturer, then you do not need the quotation marks.\n\n#### Variables in both rows and columns\n\nYou have this data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_models_fuel <- tribble(\n  ~manufacturer, ~model, ~cylinders, ~fuel_consumption_type, ~fuel_consumption_per_100km,\n  \"VW\", \"Golf\", 4, \"urban\", 5.2,\n  \"VW\", \"Golf\", 4, \"extra urban\", 4.5,\n  \"Opel\", \"Adam\", 4, \"urban\", 4.9,\n  \"Opel\", \"Adam\", 4, \"extra urban\", 4.1\n  )\ncar_models_fuel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  manufacturer model cylinders fuel_consumption_type fuel_consumption_per_100km\n  <chr>        <chr>     <dbl> <chr>                                      <dbl>\n1 VW           Golf          4 urban                                        5.2\n2 VW           Golf          4 extra urban                                  4.5\n3 Opel         Adam          4 urban                                        4.9\n4 Opel         Adam          4 extra urban                                  4.1\n```\n\n\n:::\n:::\n\n\nIt was created using the `tribble` function: tibbles can also be created *by row*. First, the column names need to be specified by putting a tilde (`~`) in front of them. Then, you can put in values separated by commas. Please note that the number of values needs to be a multiple of the number of columns.\n\nIn this data set, there are basically five variables: manufacturer, model, cylinders, urban fuel consumption, and extra urban fuel consumption. However, the column `fuel_consumption_type` does not store a variable but the names of two variables. Hence, you need to fix this to make the data set tidy. Because this encompasses reducing the number of rows, the data set becomes wider. The function to achieve this is therefore called `pivot_wider()` and the inverse of `pivot_longer()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_models_fuel_tidy <- car_models_fuel |> \n  pivot_wider(\n    names_from = fuel_consumption_type, \n    values_from = fuel_consumption_per_100km\n    )\n\ncar_models_fuel_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  manufacturer model cylinders urban `extra urban`\n  <chr>        <chr>     <dbl> <dbl>         <dbl>\n1 VW           Golf          4   5.2           4.5\n2 Opel         Adam          4   4.9           4.1\n```\n\n\n:::\n:::\n\n\nHere, you only need to specify the columns you fetch the names and values from. As they both do already exist, you do not need to wrap them in quotation marks.\n\n#### Multiple variables in one column\n\nNow, however, there is a problem with the cylinders: their number should be depicted in a numeric vector. We could achieve this by either parsing it to a numeric vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nger_car_manufacturer_longer$cylinders <- parse_number(ger_car_manufacturer_longer$cylinders)\n```\n:::\n\n\nOn the other hand, we can also use a handy function from `tidyr` called `separate()` and afterwards drop the unnecessary column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nger_car_manufacturer_longer_sep_cyl <- ger_car_manufacturer_longer |> # first, take the tibble\n  separate(cylinders, into = c(\"cylinders\", \"drop_it\"), sep = \" \") |> # and then split the column \"cylinders\" into two\n  select(-drop_it) # you will learn about this in the lesson on dplyr  # and then drop one column from the tibble\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 40 rows [1, 2, 3, 4, 5,\n6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n```\n\n\n:::\n:::\n\n\nIf there are two (or actually more) relevant values in one column, you can simply let out the dropping process and easily split them into multiple columns. By default, the `sep =` argument divides the content by all non-alphanumeric characters (every character that is not a letter, number, or space) it contains.\n\nPlease note that the new column is still in character format. We can change this using `as.numeric()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nger_car_manufacturer_longer_sep_cyl$cylinders <- as.numeric(ger_car_manufacturer_longer_sep_cyl$cylinders)\n```\n:::\n\n\nFurthermore, you might want to sort your data in a different manner. If you want to do this by cylinders, it would look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(ger_car_manufacturer_longer_sep_cyl, cylinders)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 3\n   manufacturer cylinders frequency\n   <chr>            <dbl>     <dbl>\n 1 Audi                 3         2\n 2 BMW                  3         5\n 3 Mercedes             3         2\n 4 Opel                 3         3\n 5 VW                   3         4\n 6 Audi                 4        88\n 7 BMW                  4        93\n 8 Mercedes             4        50\n 9 Opel                 4        54\n10 VW                   4        70\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\n### Insertion: the pipe\n\nHave you noticed the `|>`? That's the pipe. It can be considered a conjunction in coding. Usually, you will use it when working with tibbles. What it does is pretty straight-forward: it takes what is on its left -- the input -- and provides it to the function on its right as the first argument. Hence, the code in the last chunk, which looks like this\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(ger_car_manufacturer_longer_sep_cyl, cylinders)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 3\n   manufacturer cylinders frequency\n   <chr>            <dbl>     <dbl>\n 1 Audi                 3         2\n 2 BMW                  3         5\n 3 Mercedes             3         2\n 4 Opel                 3         3\n 5 VW                   3         4\n 6 Audi                 4        88\n 7 BMW                  4        93\n 8 Mercedes             4        50\n 9 Opel                 4        54\n10 VW                   4        70\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\ncould have also been written like this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nger_car_manufacturer_longer_sep_cyl |> arrange(cylinders)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 3\n   manufacturer cylinders frequency\n   <chr>            <dbl>     <dbl>\n 1 Audi                 3         2\n 2 BMW                  3         5\n 3 Mercedes             3         2\n 4 Opel                 3         3\n 5 VW                   3         4\n 6 Audi                 4        88\n 7 BMW                  4        93\n 8 Mercedes             4        50\n 9 Opel                 4        54\n10 VW                   4        70\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\nbecause the tibble is the first argument in the function call.\n\nBecause the pipe (its precedessor was `%>%`) has really gained traction in the R community, many functions are now optimized for being used with the pipe. However, there are still some around which are not. A function for fitting a basic linear model with one dependent and one independent variable which are both stored in a tibble looks like this: `lm(formula = dv ~ iv, data = tibble)`. Here, the tibble is not the first argument. To be able to fit a linear model in a \"pipeline,\" you need to employ a little hack: you can use an underscore `_` as a placeholder. Here, it is important that the argument is named.\n\nLet's check out the effect the number of cylinders has on the number of models:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nger_car_manufacturer_longer_sep_cyl |> \n  lm(frequency ~ cylinders, data = _) |> \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = frequency ~ cylinders, data = ger_car_manufacturer_longer_sep_cyl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-31.852 -15.302  -0.957  10.285  61.678 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  41.4435     7.7946   5.317 4.91e-06 ***\ncylinders    -2.5304     0.8647  -2.926  0.00576 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 22.71 on 38 degrees of freedom\nMultiple R-squared:  0.1839,\tAdjusted R-squared:  0.1624 \nF-statistic: 8.563 on 1 and 38 DF,  p-value: 0.005762\n```\n\n\n:::\n:::\n\n\nAs `|>` is a bit tedious to type, a shortcut exists: `shift-ctrl-m`.\n\n### Splitting and merging cells\n\nIf there are multiple values in one column/cell and you want to split them and put them into two rows instead of columns, `tidyr` offers you the `separate_rows()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerman_cars_vec <- c(Audi = \"A1, A3, A4, A5, A6, A7, A8\", \n                     BMW = \"1 Series, 2 Series, 3 Series, 4 Series, 5 Series, 6 Series, 7 Series, 8 Series\")\ngerman_cars_tbl <- enframe(\n  german_cars_vec, \n  name = \"brand\", \n  value = \"model\"\n  )\n\ngerman_cars_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  brand model                                                                   \n  <chr> <chr>                                                                   \n1 Audi  A1, A3, A4, A5, A6, A7, A8                                              \n2 BMW   1 Series, 2 Series, 3 Series, 4 Series, 5 Series, 6 Series, 7 Series, 8…\n```\n\n\n:::\n\n```{.r .cell-code}\ntidy_german_cars_tbl <- german_cars_tbl |> \n  separate_rows(model, sep = \", \")\n```\n:::\n\n\n`enframe()` enables you to create a tibble from a (named) vector. It outputs a tibble with two columns (`name` and `value` by default): `name` contains the names of the elements (if the elements are unnamed, it contains a serial number), `value` the element. Both can be renamed in the function call by providing a character vector.\n\nIf you want to achieve the opposite, i.e., merge cells' content, you can use the counterpart, `unite()`. Let's take the following dataframe which consists of the names of the professors of the Institute for Political Science of the University of Regensburg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofessor_names_df <- data.frame(first_name = c(\"Karlfriedrich\", \"Martin\", \"Jerzy\", \"Stephan\", \"Melanie\"),\n                                 last_name = c(\"Herb\", \"Sebaldt\", \"Maćków\", \"Bierling\", \"Walter-Rogg\"))\n\nprofessor_names_tbl <- professor_names_df |> \n  as_tibble() |> \n  unite(first_name, last_name, col = \"name\", sep = \" \", remove = TRUE, na.rm = FALSE)\n\nprofessor_names_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  name               \n  <chr>              \n1 Karlfriedrich Herb \n2 Martin Sebaldt     \n3 Jerzy Maćków       \n4 Stephan Bierling   \n5 Melanie Walter-Rogg\n```\n\n\n:::\n:::\n\n\n`unite()` takes the tibble it should be applied to as the first argument (not necessary if you use the pipe). Then, it takes the two or more columns as arguments (actually, this is not necessary if you want to unite all columns). `col =` takes a character vector to specify the name of the resulting, new column. `remove = TRUE` indicates that the columns that are united are removed as well. You can, of course, set it to false, too. `na.rm = FALSE` finally indicates that missing values are not to be removed prior to the uniting process.\n\nHere, the final variant of creating tibbles is introduced as well: you can apply the function `as_tibble()` to a data frame and it will then be transformed into a tibble.\n\n### Further links\n\n-   Hadley on [tidy data](https://vita.had.co.nz/papers/tidy-data.pdf)\\\n-   The two `pivot_*()` functions lie at the heart of `tidyr`. [This article](https://www.storybench.org/pivoting-data-from-columns-to-rows-and-back-in-the-tidyverse/) from the Northeastern University's School of Journalism explains it in further detail.\n\n### Exercises\n\nBring the data sets you read into R in the \"Reading data in R\" section into a tidy format. Store the tidy data sets in a new object, named like the former object plus the suffix \"\\_tidy\" -- e.g., `books_tidy`. If no tidying is needed, you do not have to create a new object. The pipe operator should be used to connect the different steps.\n\n## Wrangling data with `dplyr`\n\nThe last chapter showed you four things: how you get data sets into R, a couple of ways to create tibbles, how to pass data to functions using the pipe (`|>`), and an introduction to tidy data and how to make data sets tidy using the `tidyr` package [@wickham_tidyr_2020]. What you haven't learned was how you can actually manipulate the data themselves. In the `tidyverse` framework [@wickham_welcome_2019], the package which enables you to accomplish those tasks is `dplyr` [@wickham_dplyr_2020].\n\n`dplyr` joined the party in 2014, building upon the `plyr` package. The d in `dplyr` stands for data set and `dplyr` works with tibbles (or data frames) only.\n\nIt consists of five main functions, the \"verbs\":\n\n-   `arrange()` -- sort values\n-   `filter()` -- pick observations\n-   `mutate()` -- create new variables (columns)\n-   `select()` -- select variables\n-   `summarize()` -- create summaries from multiple values\n\nThey are joined by `group_by()`, a function that changes the scope on which entities the functions are applied to.\n\nFurthermore, diverse `bind_` functions and `_join`s enable you to combine multiple tibbles into one. They will be introduced later.\n\nIn the following, I will guide you through how you can use the verbs to accomplish whatever goals which require data wrangling you might have.\n\nThe data set I will use here consists of the 1,000 most popular movies on IMDb which were published between 2006 and 2016 and some data on them. It was created by PromptCloud and DataStock and published on Kaggle, more information can be found [here](https://www.kaggle.com/PromptCloudHQ/imdb-data).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_raw <- read_csv(\"data/imdb2006-2016.csv\")\n```\n:::\n\n\nThe data set hasn't been modified by me before. I will show you how I would go across it using a couple of `dplyr` functions.\n\n### `select()`\n\n`select` enables you to *select* columns. Since we are dealing with tidy data, every variable has its own column.\n\n`glimpse()` provides you with an overview of the data set and its columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(imdb_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 12\n$ Rank                 <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ Title                <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\",…\n$ Genre                <chr> \"Action,Adventure,Sci-Fi\", \"Adventure,Mystery,Sci…\n$ Description          <chr> \"A group of intergalactic criminals are forced to…\n$ Director             <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan…\n$ Actors               <chr> \"Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Sal…\n$ Year                 <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2…\n$ `Runtime (Minutes)`  <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, …\n$ Rating               <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0,…\n$ Votes                <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258…\n$ `Revenue (Millions)` <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 15…\n$ Metascore            <dbl> 76, 65, 62, 59, 40, 42, 93, 71, 78, 41, 66, 74, 6…\n```\n\n\n:::\n:::\n\n\nThe columns I want to keep are: `Title`, `Director`, `Year`, `Runtime (Minutes)`, `Rating`, `Votes`, and `Revenue (Millions)`. Furthermore, I want to rename the columns: every column's name should be in lowercase and a regular name that does not need to be surrounded by back ticks -- i.e., a name that only consists of characters, numbers, underscores, or dots.\n\nThis can be achieved in a couple of ways:\n\nFirst, by choosing the columns column by column and subsequently renaming them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_raw |> \n  select(Title, Director, Year, `Runtime (Minutes)`, Rating, Votes, `Revenue (Millions)`) |> \n  rename(title = Title, director = Director, year = Year, runtime = `Runtime (Minutes)`, rating = Rating, votes = Votes, revenue_million = `Revenue (Millions)`) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, …\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5,…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\nSecond, the columns can also be chosen vice versa: unnecessary columns can be dropped using a minus:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_raw |> \n  select(-Rank, -Genre, -Description, -Actors, -Metascore) |> \n  rename(title = Title, director = Director, year = Year, runtime = `Runtime (Minutes)`, rating = Rating, votes = Votes, revenue_million = `Revenue (Millions)`) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, …\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5,…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\nColumns can also be renamed in the selecting process:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_raw |> \n  select(title = Title, director = Director, year = Year, runtime = `Runtime (Minutes)`, rating = Rating, votes = Votes, revenue_million = `Revenue (Millions)`) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, …\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5,…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\nYou can also make your expressions shorter by using a couple of hacks:\n\n`:` can be used to select all columns between two:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_raw |> \n  select(Title, Director, Year:`Revenue (Millions)`) |> \n  rename(title = Title, director = Director, year = Year, runtime = `Runtime (Minutes)`, rating = Rating, votes = Votes, revenue_million = `Revenue (Millions)`) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, …\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5,…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\n`starts_with()` select columns whose names start with the same character string:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected <- imdb_raw |> \n  select(Title, Director, Votes, Year, starts_with(\"R\")) |> \n  select(-Rank) |> \n  rename(title = Title, director = Director, year = Year, runtime = `Runtime (Minutes)`, rating = Rating, votes = Votes, revenue_million = `Revenue (Millions)`) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, …\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5,…\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\nAs you may have noticed, the order in the `select()` matters: columns will be ordered in the same order as they are chosen.\n\nA couple of further shortcuts for `select()` do exist. An overview can be found in the [`dplyr` cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf).\n\n### `filter()`\n\nWhereas `select()` enables you to choose variables (i.e., columns), `filter()` lets you choose observations (i.e., rows).\n\nIn this case, I only want movies with a revenue above \\$100,000,000:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(revenue_million > 100) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 250\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 258682, 192177,…\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 128, 116, 133, 127, 133, 107,…\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 8.3, 7.0, 7.5, 7.8, 7.9, 7.7,…\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 151.06, 100.01…\n```\n\n\n:::\n:::\n\n\nBesides, I am especially interested in the director Christopher Nolan. Therefore, I want to look at movies that were directed by him and made more than \\$100,000,000:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(revenue_million > 100 & director == \"Christopher Nolan\") |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4\nColumns: 7\n$ title           <chr> \"Interstellar\", \"The Dark Knight\", \"Inception\", \"The D…\n$ director        <chr> \"Christopher Nolan\", \"Christopher Nolan\", \"Christopher…\n$ votes           <dbl> 1047747, 1791916, 1583625, 1222645\n$ year            <dbl> 2014, 2008, 2010, 2012\n$ runtime         <dbl> 169, 152, 148, 164\n$ rating          <dbl> 8.6, 9.0, 8.8, 8.5\n$ revenue_million <dbl> 187.99, 533.32, 292.57, 448.13\n```\n\n\n:::\n:::\n\n\nThe following overview is taken from the [`dplyr` cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf) and shows the operators you can use in `filter()`:\n\n![Overview of comparison operators](figures/operators.png)\n\n#### Exemplary application\n\nTo demonstrate how a real-world application of this stuff could look like, I will now provide you a brief insight into my private life and how I organize movie nights. JK. You could definitely try this at home and surprise your loved ones with such hot applications. If you are brave and surprise your latest Tinder match with an .RDS file containing suggestions for Netflix&Chill, please let me know what their response looked like.\n\nTonight, I will hang out with a real nerd. Probably because they (nerds have all kinds of genders) know about my faible for R, they have sent me a vector containing a couple of movies we could watch tonight:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # guarantees that movie_vec will always be the same thing\nmovie_vec <- imdb_raw$Title[sample(1000, 10, replace = FALSE)]\nmovie_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Mechanic: Resurrection\" \"Denial\"                 \"The Conjuring 2\"       \n [4] \"Birth of the Dragon\"    \"Warrior\"                \"Super\"                 \n [7] \"127 Hours\"              \"Dangal\"                 \"The Infiltrator\"       \n[10] \"Maleficent\"            \n```\n\n\n:::\n:::\n\n\nHowever, I want to make a more informed decision and decide to obtain some more information on the movies from my IMDb data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(title %in% movie_vec) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10\nColumns: 7\n$ title           <chr> \"Dangal\", \"The Conjuring 2\", \"Warrior\", \"Maleficent\", …\n$ director        <chr> \"Nitesh Tiwari\", \"James Wan\", \"Gavin O'Connor\", \"Rober…\n$ votes           <dbl> 48969, 137203, 355722, 268877, 43929, 48161, 8229, 552…\n$ year            <dbl> 2016, 2016, 2011, 2014, 2016, 2016, 2016, 2016, 2010, …\n$ runtime         <dbl> 161, 134, 140, 97, 127, 98, 109, 103, 94, 96\n$ rating          <dbl> 8.8, 7.4, 8.2, 7.0, 7.1, 5.6, 6.6, 3.9, 7.6, 6.8\n$ revenue_million <dbl> 11.15, 102.46, 13.65, 241.41, 15.43, 21.20, 4.07, 93.0…\n```\n\n\n:::\n:::\n\n\nI have convinced them to watch either one of the movies they have suggested or one directed by Christopher Nolan or one with a rating greater or equal to 8.5 and send them back this data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(title %in% movie_vec | director == \"Christopher Nolan\" | rating >= 8.5) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 21\nColumns: 7\n$ title           <chr> \"Interstellar\", \"The Dark Knight\", \"The Prestige\", \"In…\n$ director        <chr> \"Christopher Nolan\", \"Christopher Nolan\", \"Christopher…\n$ votes           <dbl> 1047747, 1791916, 913152, 1583625, 34110, 937414, 4896…\n$ year            <dbl> 2014, 2008, 2006, 2010, 2016, 2006, 2016, 2012, 2014, …\n$ runtime         <dbl> 169, 152, 130, 148, 106, 151, 161, 164, 107, 134, 140,…\n$ rating          <dbl> 8.6, 9.0, 8.5, 8.8, 8.6, 8.5, 8.8, 8.5, 8.5, 7.4, 8.2,…\n$ revenue_million <dbl> 187.99, 533.32, 53.08, 292.57, 4.68, 132.37, 11.15, 44…\n```\n\n\n:::\n:::\n\n\n\"I deteste 'Interstellar',\" is the response. \"All right,\" I say to myself, \"I can easily exclude it.\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(title %in% movie_vec | director == \"Christopher Nolan\" | rating >= 8.5 & title != \"Interstellar\") |> # if you want to negate something, put the ! in front of it\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 21\nColumns: 7\n$ title           <chr> \"Interstellar\", \"The Dark Knight\", \"The Prestige\", \"In…\n$ director        <chr> \"Christopher Nolan\", \"Christopher Nolan\", \"Christopher…\n$ votes           <dbl> 1047747, 1791916, 913152, 1583625, 34110, 937414, 4896…\n$ year            <dbl> 2014, 2008, 2006, 2010, 2016, 2006, 2016, 2012, 2014, …\n$ runtime         <dbl> 169, 152, 130, 148, 106, 151, 161, 164, 107, 134, 140,…\n$ rating          <dbl> 8.6, 9.0, 8.5, 8.8, 8.6, 8.5, 8.8, 8.5, 8.5, 7.4, 8.2,…\n$ revenue_million <dbl> 187.99, 533.32, 53.08, 292.57, 4.68, 132.37, 11.15, 44…\n```\n\n\n:::\n:::\n\n\nOh, that did not work. I should wrap them in columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter((title %in% movie_vec | director == \"Christopher Nolan\" | rating >= 8.5) & title != \"Interstellar\") |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 20\nColumns: 7\n$ title           <chr> \"The Dark Knight\", \"The Prestige\", \"Inception\", \"Kimi …\n$ director        <chr> \"Christopher Nolan\", \"Christopher Nolan\", \"Christopher…\n$ votes           <dbl> 1791916, 913152, 1583625, 34110, 937414, 48969, 122264…\n$ year            <dbl> 2008, 2006, 2010, 2016, 2006, 2016, 2012, 2014, 2016, …\n$ runtime         <dbl> 152, 130, 148, 106, 151, 161, 164, 107, 134, 140, 97, …\n$ rating          <dbl> 9.0, 8.5, 8.8, 8.6, 8.5, 8.8, 8.5, 8.5, 7.4, 8.2, 7.0,…\n$ revenue_million <dbl> 533.32, 53.08, 292.57, 4.68, 132.37, 11.15, 448.13, 13…\n```\n\n\n:::\n:::\n\n\nThey come up with a new idea: we have a Scottish evening with a movie directed by the Scottish director Gillies MacKinnon:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(director == \"Gillies MacKinnon\") |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 7\n$ title           <chr> \"Whisky Galore\"\n$ director        <chr> \"Gillies MacKinnon\"\n$ votes           <dbl> 102\n$ year            <dbl> 2016\n$ runtime         <dbl> 98\n$ rating          <dbl> 5\n$ revenue_million <dbl> NA\n```\n\n\n:::\n:::\n\n\n\"Well, apparently there is a problem in the data set,\" I notice. \"There is an NA in the revenue column. I should probably have a further look at this.\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(is.na(revenue_million)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 128\nColumns: 7\n$ title           <chr> \"Mindhorn\", \"Hounds of Love\", \"Paris pieds nus\", \"5- 2…\n$ director        <chr> \"Sean Foley\", \"Ben Young\", \"Dominique Abel\", \"Patrick …\n$ votes           <dbl> 2490, 1115, 222, 241, 496, 5103, 987, 35870, 149791, 7…\n$ year            <dbl> 2016, 2016, 2016, 2007, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 89, 108, 83, 113, 73, 91, 130, 86, 133, 106, 105, 118,…\n$ rating          <dbl> 6.4, 6.7, 6.8, 7.1, 2.7, 5.6, 3.7, 6.8, 5.9, 7.9, 5.8,…\n$ revenue_million <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nWell, that's quite a significant number of NAs. I will need to exclude these cases:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  filter(!is.na(revenue_million)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 872\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 141, 116, 133, 127,…\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 7.1, 7.0, 7.5, 7.8,…\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\n#### Other possibilities to subset observations\n\n`slice()` selects rows by positions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  slice(1:10) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  slice_min(revenue_million, n = 10) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10\nColumns: 7\n$ title           <chr> \"A Kind of Murder\", \"Dead Awake\", \"Wakefield\", \"Loveso…\n$ director        <chr> \"Andy Goddard\", \"Phillip Guzman\", \"Robin Swicord\", \"So…\n$ votes           <dbl> 3305, 523, 291, 616, 80415, 10220, 36091, 54027, 4155,…\n$ year            <dbl> 2016, 2016, 2016, 2016, 2014, 2015, 2010, 2012, 2015, …\n$ runtime         <dbl> 95, 99, 106, 84, 102, 101, 98, 95, 93, 110\n$ rating          <dbl> 5.2, 4.7, 7.5, 6.4, 7.2, 5.9, 6.5, 6.9, 5.6, 5.9\n$ revenue_million <dbl> 0.00, 0.01, 0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, …\n```\n\n\n:::\n:::\n\n\n`distinct` removes duplicate rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  distinct(director) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 644\nColumns: 1\n$ director <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"Christop…\n```\n\n\n:::\n:::\n\n\nBy default, it will remove all other columns apart from the one(s) you have specified. You can avoid that by setting `.keep_all = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  distinct(title, .keep_all = TRUE) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 999\nColumns: 7\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, …\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5,…\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n```\n\n\n:::\n:::\n\n\nOh, interesting, there is apparently one movie which is in there twice. How could we find this movie?\n\n### `mutate()`\n\nMy data set looks pretty nice already, but one flaw catches the eye: the column `revenue_million` should probably be converted to `revenue`. Hence, I need to create a new variable which contains the values from `revenue_million` multiplied by 1,000,000 and drop the now obsolete `revenue_million`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  mutate(revenue = revenue_million * 1000000) |> \n  select(-revenue_million) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 7\n$ title    <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sing\", \"Su…\n$ director <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"Christop…\n$ votes    <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, 2490, 7…\n$ year     <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2…\n$ runtime  <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, 127, 13…\n$ rating   <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5, 7.8, 7…\n$ revenue  <dbl> 333130000, 126460000, 138120000, 270320000, 325020000, 451300…\n```\n\n\n:::\n:::\n\n\nThe structure of the `mutate()` call looks like this: first, you need to provide the name of the new variable. If the variable exists already, it will be replaced. Second, the equal sign tells R what the new variable should contain. Third, a function that outputs a vector which is as long as the tibble has rows or 1.\n\nIf we want to drop all other columns and just keep the new one: `transmute()` drops all the original columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  transmute(revenue = revenue_million * 1000000) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 1\n$ revenue <dbl> 333130000, 126460000, 138120000, 270320000, 325020000, 4513000…\n```\n\n\n:::\n:::\n\n\n`mutate()` uses so-called *window functions*. They take one vector of values and return another vector of values. An overview -- again, from the cheat sheet:\n\n![Window functions](figures/window_functions.png)\n\nAnother feature of `dplyr`, which is useful in combination with `mutate()`, is `case_when()`.\n\n`case_when()` can for instance be used to create binary indicator variables. In this example I want it to be 0 if the movie was made before 2010 and 1 if not. `case_when()` works like this: first, you provide a condition (e.g., `year < 2010`). Second, you provide what the output should be if the condition is met (here, `0`). Third, you can provide as many conditions as you want. Finally, you can provide a default value using `TRUE ~ value`. If none of the conditions are met, the default value will be assigned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  mutate(indicator = case_when(year < 2010 ~ 0,\n                               year >= 2010 ~ 1,\n                               TRUE ~ 2)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,000\nColumns: 8\n$ title           <chr> \"Guardians of the Galaxy\", \"Prometheus\", \"Split\", \"Sin…\n$ director        <chr> \"James Gunn\", \"Ridley Scott\", \"M. Night Shyamalan\", \"C…\n$ votes           <dbl> 757074, 485820, 157606, 60545, 393727, 56036, 258682, …\n$ year            <dbl> 2014, 2012, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ runtime         <dbl> 121, 124, 117, 108, 123, 103, 128, 89, 141, 116, 133, …\n$ rating          <dbl> 8.1, 7.0, 7.3, 7.2, 6.2, 6.1, 8.3, 6.4, 7.1, 7.0, 7.5,…\n$ revenue_million <dbl> 333.13, 126.46, 138.12, 270.32, 325.02, 45.13, 151.06,…\n$ indicator       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n```\n\n\n:::\n:::\n\n\nKeep in mind that you can throw any function into `mutate()` as long as it is vectorized and the output has the same length as the tibble or 1.\n\n`case_when()` also has a sibling called `case_match()`. It is used when you want to create a new variable based on the values of a categorical variable. It works similar to `case_when()`, but instead of providing conditions, you provide the exact values you want to match. `case_match()` provides a cleaner syntax when you're matching exact values. It's particularly useful when you want to recode or map specific values to new ones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  mutate(\n    # Match specific years to decades\n    decade = case_match(\n      year,\n      2006:2009 ~ \"2000s\",\n      2010:2016 ~ \"2010s\",\n      .default = \"Unknown\"\n    )\n  ) |> \n  count(decade)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  decade     n\n  <chr>  <int>\n1 2000s    200\n2 2010s    800\n```\n\n\n:::\n:::\n\n\nYou can also use case_match() with character values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  mutate(\n    director_type = case_match(\n      director,\n      c(\"Christopher Nolan\", \"Steven Spielberg\", \"Martin Scorsese\") ~ \"Famous\",\n      .default = \"Other\"\n    )\n  ) |> \n  count(director_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  director_type     n\n  <chr>         <int>\n1 Famous           14\n2 Other           986\n```\n\n\n:::\n:::\n\n\nKey differences between `case_when()` and `case_match()`:\n\n- Syntax: `case_match()` uses the value to match on the left side, while `case_when()` uses conditions\n- Use case: `case_match()` is for exact matching, `case_when()` is for complex conditions\n- Performance: `case_match()` can be faster for simple value matching\n- Readability: `case_match()` is often cleaner when recoding variables\n\n### `summarize()`, `group_by()`, and `reframe()`\n\nWhen you analyze data, you often want to compare entities according to some sort of summary statistic. This means that you, first, need to split up your data set into certain groups which share one or more characteristics, and, second, collapse the rows together into single-row summaries. The former challenge is accomplished using `group_by()` whose argument is one or more variables, the latter requires the `summarize()` function. This function works similar to `mutate()` but uses *summary functions* -- which take a vector of multiple values and return a single value -- instead of window functions -- which return a vector of the same length as the input.\n\nLet me provide you an example.\n\nI am interested in the director's average ratings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  group_by(director, year) |> \n  summarize(avg_rating = mean(rating),\n            avg_revenue = mean(revenue_million, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'director'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 987 × 4\n# Groups:   director [644]\n   director             year avg_rating avg_revenue\n   <chr>               <dbl>      <dbl>       <dbl>\n 1 Aamir Khan           2007        8.5        1.2 \n 2 Abdellatif Kechiche  2013        7.8        2.2 \n 3 Adam Leon            2016        6.5      NaN   \n 4 Adam McKay           2006        6.6      148.  \n 5 Adam McKay           2008        6.9      100.  \n 6 Adam McKay           2010        6.7      119.  \n 7 Adam McKay           2015        7.8       70.2 \n 8 Adam Shankman        2007        6.7      119.  \n 9 Adam Shankman        2012        5.9       38.5 \n10 Adam Wingard         2014        6.7        0.32\n# ℹ 977 more rows\n```\n\n\n:::\n:::\n\n\nIn general, `summarize()` always works like this: first, you change the scope from the entire tibble to different groups. Then, you calculate your summary. If you then want to further manipulate your data or calculate something else based on the new summary, you need to call `ungroup()`.\n\nYou can see the summary functions below:\n\n![Summary functions in R](figures/summary_functions.png)\n\nAnother handy function akin to this is `count()`. It counts all occurrences of a singular value in the tibble.\n\nIf I were interested in how many movies of the different directors have made it into the data set, I could use this code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  count(director)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 644 × 2\n   director                n\n   <chr>               <int>\n 1 Aamir Khan              1\n 2 Abdellatif Kechiche     1\n 3 Adam Leon               1\n 4 Adam McKay              4\n 5 Adam Shankman           2\n 6 Adam Wingard            2\n 7 Afonso Poyart           1\n 8 Aisling Walsh           1\n 9 Akan Satayev            1\n10 Akiva Schaffer          1\n# ℹ 634 more rows\n```\n\n\n:::\n:::\n\n\nWhile `summarize()` is powerful, it has a limitation: it always returns exactly one row per group. Sometimes you need more flexibility - that's where `reframe()` comes in. Introduced in dplyr 1.1.0, `reframe()` allows you to return any number of rows per group.\n\nWith reframe(), we can for instance calculate the rating quantiles per director:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  group_by(director) |> \n  reframe(\n    rating_quantiles = quantile(rating, probs = c(0.25, 0.5, 0.75)),\n    quantile = rep(c(0.25, 0.5, 0.75))\n  ) |> \n    ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,932 × 3\n   director            rating_quantiles quantile\n   <chr>                          <dbl>    <dbl>\n 1 Aamir Khan                      8.5      0.25\n 2 Aamir Khan                      8.5      0.5 \n 3 Aamir Khan                      8.5      0.75\n 4 Abdellatif Kechiche             7.8      0.25\n 5 Abdellatif Kechiche             7.8      0.5 \n 6 Abdellatif Kechiche             7.8      0.75\n 7 Adam Leon                       6.5      0.25\n 8 Adam Leon                       6.5      0.5 \n 9 Adam Leon                       6.5      0.75\n10 Adam McKay                      6.68     0.25\n# ℹ 1,922 more rows\n```\n\n\n:::\n:::\n\n\nThis example calculates the 25th, 50th, and 75th percentiles of ratings. Each director will have one row with their average rating and a list of quantiles.\n\nWhen to use reframe() vs summarize():\n\nUse `summarize()` when you want:\n\n- One summary value per group (mean, sum, count, etc.)\n- A single row of results per group\n\nUse `reframe()` when you need:\n\n- Multiple rows per group\n- To return quantiles, ranges, or other multi-value summaries\n- More flexibility in your output structure\n\nNote that both functions return a grouped tibble, so you may want to `ungroup()` afterwards if you're doing further operations.\n\n### `arrange()`\n\nFinally, you can also sort values using `arrange()`. In the last section, I was interested in directors' respective average ratings. The values were ordered according to their name (hence, \"Aamir Khan\" was first). In this case, the order dos not make too much sense, because the first name does not say too much about the director's ratings. Therefore, I want to sort them according to their average ratings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  group_by(director) |> \n  summarize(avg_rating = mean(rating)) |> \n  arrange(avg_rating)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 644 × 2\n   director           avg_rating\n   <chr>                   <dbl>\n 1 Jason Friedberg           1.9\n 2 James Wong                2.7\n 3 Shawn Burkett             2.7\n 4 Jonathan Holbrook         3.2\n 5 Femi Oyeniran             3.5\n 6 Micheal Bafaro            3.5\n 7 Jeffrey G. Hunt           3.7\n 8 Rolfe Kanefsky            3.9\n 9 Joey Curtis               4  \n10 Sam Taylor-Johnson        4.1\n# ℹ 634 more rows\n```\n\n\n:::\n:::\n\n\nAll right, Jason Friedberg is apparently the director of the worst rated movie in my data set. But it would be more handy, if they were arranged in descending order. I can use `desc()` for this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_selected |> \n  group_by(director) |> \n  summarize(avg_rating = mean(rating)) |> \n  arrange(-avg_rating)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 644 × 2\n   director                         avg_rating\n   <chr>                                 <dbl>\n 1 Nitesh Tiwari                          8.8 \n 2 Christopher Nolan                      8.68\n 3 Makoto Shinkai                         8.6 \n 4 Olivier Nakache                        8.6 \n 5 Aamir Khan                             8.5 \n 6 Florian Henckel von Donnersmarck       8.5 \n 7 Damien Chazelle                        8.4 \n 8 Naoko Yamada                           8.4 \n 9 Amber Tamblyn                          8.3 \n10 Lee Unkrich                            8.3 \n# ℹ 634 more rows\n```\n\n\n:::\n:::\n\n\nChapeau, Nitesh Tiwari!\n\n### Introducing `joins`\n\nThe last session showed you three things: how you get data sets into R, a couple of ways to create tibbles, and an introduction to tidy data and how to make data sets tidy using the `tidyr` package. As you may recall from the last session, it was not able to solve the last two problems with only the tools `tidyr` offers. In particular, the problems were:\n\n-   Multiple types of observational units are stored in the same table.\n-   A single observational unit is stored in multiple tables.\n\nBoth problems need some different kind of tools: joins. Joins can be used to merge tibbles together. This tutorial, again, builds heavily on the R for Data Science book [@wickham_data_2016]\n\n#### Multiple types of units are in the same table\n\nLet's look at the following data set. It contains the billboard charts in 2000 and was obtained from the [`tidyr` GitHub repo](https://github.com/tidyverse/tidyr/blob/master/data/billboard.rda). The example below is taken from the `tidyr` vignette which can be loaded using `vignette(\"tidy-data\", package = \"tidyr\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/billboard.rda\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(billboard)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 317\nColumns: 79\n$ artist       <chr> \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 …\n$ track        <chr> \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Kr…\n$ date.entered <date> 2000-02-26, 2000-09-02, 2000-04-08, 2000-10-21, 2000-04-…\n$ wk1          <dbl> 87, 91, 81, 76, 57, 51, 97, 84, 59, 76, 84, 57, 50, 71, 7…\n$ wk2          <dbl> 82, 87, 70, 76, 34, 39, 97, 62, 53, 76, 84, 47, 39, 51, 6…\n$ wk3          <dbl> 72, 92, 68, 72, 25, 34, 96, 51, 38, 74, 75, 45, 30, 28, 5…\n$ wk4          <dbl> 77, NA, 67, 69, 17, 26, 95, 41, 28, 69, 73, 29, 28, 18, 4…\n$ wk5          <dbl> 87, NA, 66, 67, 17, 26, 100, 38, 21, 68, 73, 23, 21, 13, …\n$ wk6          <dbl> 94, NA, 57, 65, 31, 19, NA, 35, 18, 67, 69, 18, 19, 13, 3…\n$ wk7          <dbl> 99, NA, 54, 55, 36, 2, NA, 35, 16, 61, 68, 11, 20, 11, 34…\n$ wk8          <dbl> NA, NA, 53, 59, 49, 2, NA, 38, 14, 58, 65, 9, 17, 1, 29, …\n$ wk9          <dbl> NA, NA, 51, 62, 53, 3, NA, 38, 12, 57, 73, 9, 17, 1, 27, …\n$ wk10         <dbl> NA, NA, 51, 61, 57, 6, NA, 36, 10, 59, 83, 11, 17, 2, 30,…\n$ wk11         <dbl> NA, NA, 51, 61, 64, 7, NA, 37, 9, 66, 92, 1, 17, 2, 36, N…\n$ wk12         <dbl> NA, NA, 51, 59, 70, 22, NA, 37, 8, 68, NA, 1, 3, 3, 37, N…\n$ wk13         <dbl> NA, NA, 47, 61, 75, 29, NA, 38, 6, 61, NA, 1, 3, 3, 39, N…\n$ wk14         <dbl> NA, NA, 44, 66, 76, 36, NA, 49, 1, 67, NA, 1, 7, 4, 49, N…\n$ wk15         <dbl> NA, NA, 38, 72, 78, 47, NA, 61, 2, 59, NA, 4, 10, 12, 57,…\n$ wk16         <dbl> NA, NA, 28, 76, 85, 67, NA, 63, 2, 63, NA, 8, 17, 11, 63,…\n$ wk17         <dbl> NA, NA, 22, 75, 92, 66, NA, 62, 2, 67, NA, 12, 25, 13, 65…\n$ wk18         <dbl> NA, NA, 18, 67, 96, 84, NA, 67, 2, 71, NA, 22, 29, 15, 68…\n$ wk19         <dbl> NA, NA, 18, 73, NA, 93, NA, 83, 3, 79, NA, 23, 29, 18, 79…\n$ wk20         <dbl> NA, NA, 14, 70, NA, 94, NA, 86, 4, 89, NA, 43, 40, 20, 86…\n$ wk21         <dbl> NA, NA, 12, NA, NA, NA, NA, NA, 5, NA, NA, 44, 43, 30, NA…\n$ wk22         <dbl> NA, NA, 7, NA, NA, NA, NA, NA, 5, NA, NA, NA, 50, 40, NA,…\n$ wk23         <dbl> NA, NA, 6, NA, NA, NA, NA, NA, 6, NA, NA, NA, NA, 39, NA,…\n$ wk24         <dbl> NA, NA, 6, NA, NA, NA, NA, NA, 9, NA, NA, NA, NA, 44, NA,…\n$ wk25         <dbl> NA, NA, 6, NA, NA, NA, NA, NA, 13, NA, NA, NA, NA, NA, NA…\n$ wk26         <dbl> NA, NA, 5, NA, NA, NA, NA, NA, 14, NA, NA, NA, NA, NA, NA…\n$ wk27         <dbl> NA, NA, 5, NA, NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA…\n$ wk28         <dbl> NA, NA, 4, NA, NA, NA, NA, NA, 23, NA, NA, NA, NA, NA, NA…\n$ wk29         <dbl> NA, NA, 4, NA, NA, NA, NA, NA, 22, NA, NA, NA, NA, NA, NA…\n$ wk30         <dbl> NA, NA, 4, NA, NA, NA, NA, NA, 33, NA, NA, NA, NA, NA, NA…\n$ wk31         <dbl> NA, NA, 4, NA, NA, NA, NA, NA, 36, NA, NA, NA, NA, NA, NA…\n$ wk32         <dbl> NA, NA, 3, NA, NA, NA, NA, NA, 43, NA, NA, NA, NA, NA, NA…\n$ wk33         <dbl> NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk34         <dbl> NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk35         <dbl> NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk36         <dbl> NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk37         <dbl> NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk38         <dbl> NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk39         <dbl> NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk40         <dbl> NA, NA, 15, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk41         <dbl> NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk42         <dbl> NA, NA, 13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk43         <dbl> NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk44         <dbl> NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk45         <dbl> NA, NA, 17, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk46         <dbl> NA, NA, 21, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk47         <dbl> NA, NA, 22, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk48         <dbl> NA, NA, 24, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk49         <dbl> NA, NA, 28, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk50         <dbl> NA, NA, 33, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk51         <dbl> NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk52         <dbl> NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk53         <dbl> NA, NA, 49, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk54         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk55         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk56         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk57         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk58         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk59         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk60         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk61         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk62         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk63         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk64         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk65         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk66         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk67         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk68         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk69         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk70         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk71         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk72         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk73         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk74         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk75         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk76         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\nHere, you can immediately see the problem: it contains two types of observations: songs and ranks. Hence, the data set needs to be split up. However, there should be a pointer from the rank data set to the song data set. First, I add an ID column to `song_tbl`. Then, I can add it to `rank_tbl` and drop the unnecessary columns which contain the name of the artist and the track.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsong_tbl <- billboard |> \n  rowid_to_column(\"song_id\") |> \n  distinct(artist, track, .keep_all = TRUE) |> \n  select(song_id:track)\n\nglimpse(song_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 317\nColumns: 3\n$ song_id <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,…\n$ artist  <chr> \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 Boyz\"…\n$ track   <chr> \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Krypton…\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_tbl <- billboard |> \n  pivot_longer(cols = starts_with(\"wk\"), \n               names_to = \"week\", \n               names_prefix = \"wk\", \n               values_to = \"rank\") |> \n  mutate(week = as.numeric(week),\n         date = date.entered + (week-1) * 7) |> \n  drop_na() |> \n  left_join(song_tbl, by = c(\"artist\", \"track\")) |> \n  select(song_id, date, week, rank)\n\nglimpse(rank_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,307\nColumns: 4\n$ song_id <int> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ date    <date> 2000-02-26, 2000-03-04, 2000-03-11, 2000-03-18, 2000-03-25, 2…\n$ week    <dbl> 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1…\n$ rank    <dbl> 87, 82, 72, 77, 87, 94, 99, 91, 87, 92, 81, 70, 68, 67, 66, 57…\n```\n\n\n:::\n:::\n\n\n#### One unit is in multiple tables\n\nFor this example, I have split up a data set from the `socviz` package containing data on the 2016 elections in the U.S. according to census region and stored them in a folder. I can scrape the file names in the folder and read it into a list in an automated manner. (Note that the functions used to read the files in in an automated fashion are beyond the scope of this course. They come from the [`fs`](https://github.com/r-lib/fs) [@hester_fs_2021] and the [`purrr`](https://r4ds.had.co.nz/iteration.html) package [@henry_purrr_2020].)[^catch-up-3]\n\n[^catch-up-3]: If you want to run the code on your machine, download the files behind the following links and store them in a folder called `socviz_us` which is again stored in a folder named `data` which lives in the same folder as the .qmd file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_list <- dir_ls(path = \"data/socviz_us\") |> \n  map(read_csv,\n      col_types = cols(\n        id = col_double(),\n        name = col_character(),\n        state = col_character(),\n        census_region = col_character(),\n        pop_dens = col_character(),\n        pop_dens4 = col_character(),\n        pop_dens6 = col_character(),\n        pct_black = col_character(),\n        pop = col_double(),\n        female = col_double(),\n        white = col_double(),\n        black = col_double(),\n        travel_time = col_double(),\n        land_area = col_double(),\n        hh_income = col_double(),\n        su_gun4 = col_character(),\n        su_gun6 = col_character(),\n        fips = col_double(),\n        votes_dem_2016 = col_double(),\n        votes_gop_2016 = col_double(),\n        total_votes_2016 = col_double(),\n        per_dem_2016 = col_double(),\n        per_gop_2016 = col_double(),\n        diff_2016 = col_double(),\n        per_dem_2012 = col_double(),\n        per_gop_2012 = col_double(),\n        diff_2012 = col_double(),\n        winner = col_character(),\n        partywinner16 = col_character(),\n        winner12 = col_character(),\n        partywinner12 = col_character(),\n        flipped = col_character()\n))\n```\n:::\n\n\nThe list now consists of four tibbles in a list which need to be bound together. You can achieve this using `list_rbind()`. Its counterpart is `list_cbind()` which binds columns together. It matches rows by position.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data <- file_list |> list_rbind()\nglimpse(election_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,141\nColumns: 32\n$ id               <dbl> 17001, 17003, 17005, 17007, 17009, 17011, 17013, 1701…\n$ name             <chr> \"Adams County\", \"Alexander County\", \"Bond County\", \"B…\n$ state            <chr> \"IL\", \"IL\", \"IL\", \"IL\", \"IL\", \"IL\", \"IL\", \"IL\", \"IL\",…\n$ census_region    <chr> \"Midwest\", \"Midwest\", \"Midwest\", \"Midwest\", \"Midwest\"…\n$ pop_dens         <chr> \"[   50,  100)\", \"[   10,   50)\", \"[   10,   50)\", \"[…\n$ pop_dens4        <chr> \"[ 45,  118)\", \"[ 17,   45)\", \"[ 45,  118)\", \"[118,71…\n$ pop_dens6        <chr> \"[ 45,   82)\", \"[ 25,   45)\", \"[ 45,   82)\", \"[ 82,  …\n$ pct_black        <chr> \"[ 2.0, 5.0)\", \"[25.0,50.0)\", \"[ 5.0,10.0)\", \"[ 2.0, …\n$ pop              <dbl> 66988, 7492, 17269, 53869, 6832, 33840, 4956, 14715, …\n$ female           <dbl> 51.3, 49.5, 47.5, 50.2, 35.5, 51.0, 49.7, 50.1, 49.1,…\n$ white            <dbl> 93.7, 60.6, 90.9, 93.2, 78.6, 96.8, 98.8, 96.7, 93.2,…\n$ black            <dbl> 3.7, 36.1, 6.5, 2.6, 19.1, 0.8, 0.3, 1.1, 4.4, 12.8, …\n$ travel_time      <dbl> 16.6, 25.6, 23.6, 30.1, 18.9, 20.4, 39.6, 23.8, 22.2,…\n$ land_area        <dbl> 855.20, 235.51, 380.28, 280.72, 305.61, 869.03, 253.8…\n$ hh_income        <dbl> 45073, 26972, 48163, 60893, 42194, 48977, 50436, 4798…\n$ su_gun4          <chr> \"[ 0, 5)\", \"[ 5, 8)\", \"[ 0, 5)\", \"[ 0, 5)\", \"[ 0, 5)\"…\n$ su_gun6          <chr> \"[ 4, 7)\", \"[ 7, 8)\", \"[ 4, 7)\", \"[ 0, 4)\", \"[ 0, 4)\"…\n$ fips             <dbl> 17001, 17003, 17005, 17007, 17009, 17011, 17013, 1701…\n$ votes_dem_2016   <dbl> 7633, 1262, 2066, 8952, 475, 6010, 739, 2437, 1617, 4…\n$ votes_gop_2016   <dbl> 22732, 1496, 4884, 12261, 1776, 9264, 1719, 4428, 321…\n$ total_votes_2016 <dbl> 31770, 2820, 7462, 22604, 2336, 16303, 2556, 7354, 50…\n$ per_dem_2016     <dbl> 0.2402581, 0.4475177, 0.2768695, 0.3960361, 0.2033390…\n$ per_gop_2016     <dbl> 0.7155178, 0.5304965, 0.6545162, 0.5424261, 0.7602740…\n$ diff_2016        <dbl> 15099, 234, 2818, 3309, 1301, 3254, 980, 1991, 1599, …\n$ per_dem_2012     <dbl> 0.3152466, 0.5610873, 0.4122471, 0.4625697, 0.3331922…\n$ per_gop_2012     <dbl> 0.6670705, 0.4248927, 0.5591853, 0.5195706, 0.6397121…\n$ diff_2012        <dbl> 10744, 476, 1075, 1216, 724, 33, 360, 107, 657, 5292,…\n$ winner           <chr> \"Trump\", \"Trump\", \"Trump\", \"Trump\", \"Trump\", \"Trump\",…\n$ partywinner16    <chr> \"Republican\", \"Republican\", \"Republican\", \"Republican…\n$ winner12         <chr> \"Romney\", \"Obama\", \"Romney\", \"Romney\", \"Romney\", \"Rom…\n$ partywinner12    <chr> \"Republican\", \"Democrat\", \"Republican\", \"Republican\",…\n$ flipped          <chr> \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n```\n\n\n:::\n:::\n\n\n\nHowever, the topic of this script is different joins. The `dplyr` package offers six different joins: `left_join()`, `right_join()`, `inner_join()`, `full_join()`, `semi_join()`, and `anti_join()`. The former four are mutating joins, they add columns. The latter two can be used to filter rows in a data set. Below is an overview from the `dplyr` cheat sheet:\n\n![Overview of the different joins](figures/joins.png)\n\nIn the following, I will illustrate this using the election data. I split up the data set into three: data on the elections 2016 and 2012, and demographic data. The column they have in common is the county's respective name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 <- election_data |> \n  select(name, state, votes_dem_2016:diff_2016, winner, partywinner16)\n\nelection_data12 <- election_data |> \n  select(name, state, per_dem_2012:partywinner12)\n\ndemographic_data <- election_data |> \n  select(name, state, pop:hh_income) |> \n  slice(1:2000) #you will see later why I do this\n```\n:::\n\n\n#### `left_join()` and `right_join()`\n\nIf we want to add the demographic data to the election data 2016, we can use a `left_join()` or a `right_join()`. The former adds all columns of `y` to `x`, the latter all columns of `x` to `y`. Here, I want to add the demographic data to the election data 2016. Therefore, I use a `left_join()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  left_join(demographic_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name, state)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,141 × 17\n   name        state votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr>       <chr>          <dbl>          <dbl>            <dbl>        <dbl>\n 1 Adams Coun… IL              7633          22732            31770        0.240\n 2 Alexander … IL              1262           1496             2820        0.448\n 3 Bond County IL              2066           4884             7462        0.277\n 4 Boone Coun… IL              8952          12261            22604        0.396\n 5 Brown Coun… IL               475           1776             2336        0.203\n 6 Bureau Cou… IL              6010           9264            16303        0.369\n 7 Calhoun Co… IL               739           1719             2556        0.289\n 8 Carroll Co… IL              2437           4428             7354        0.331\n 9 Cass County IL              1617           3216             5054        0.320\n10 Champaign … IL             49694          33235            89196        0.557\n# ℹ 3,131 more rows\n# ℹ 11 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>, pop <dbl>, female <dbl>, white <dbl>, black <dbl>,\n#   travel_time <dbl>, land_area <dbl>, hh_income <dbl>\n```\n\n\n:::\n:::\n\n\nIf the column that both data sets have in common has the same name, there's no need to provide it. If this is not the case, you need to provide it in a character vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  rename(county = name) |> \n  right_join(demographic_data, by = join_by(\"county\" == \"name\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in right_join(rename(election_data16, county = name), demographic_data, : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,348 × 18\n   county    state.x votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr>     <chr>            <dbl>          <dbl>            <dbl>        <dbl>\n 1 Adams Co… IL                7633          22732            31770        0.240\n 2 Adams Co… IL                7633          22732            31770        0.240\n 3 Adams Co… IL                7633          22732            31770        0.240\n 4 Adams Co… IL                7633          22732            31770        0.240\n 5 Adams Co… IL                7633          22732            31770        0.240\n 6 Adams Co… IL                7633          22732            31770        0.240\n 7 Adams Co… IL                7633          22732            31770        0.240\n 8 Adams Co… IL                7633          22732            31770        0.240\n 9 Adams Co… IL                7633          22732            31770        0.240\n10 Alexande… IL                1262           1496             2820        0.448\n# ℹ 10,338 more rows\n# ℹ 12 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>, state.y <chr>, pop <dbl>, female <dbl>, white <dbl>,\n#   black <dbl>, travel_time <dbl>, land_area <dbl>, hh_income <dbl>\n```\n\n\n:::\n:::\n\n\nHere, the problem is that the same counties exist in different states. Therefore, all combinations are returned. Hence, I need to specify two arguments: the county's name and state.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  rename(county = name) |> \n  right_join(demographic_data, by = join_by(\"county\" == \"name\", \"state\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000 × 17\n   county      state votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr>       <chr>          <dbl>          <dbl>            <dbl>        <dbl>\n 1 Adams Coun… IL              7633          22732            31770        0.240\n 2 Alexander … IL              1262           1496             2820        0.448\n 3 Bond County IL              2066           4884             7462        0.277\n 4 Boone Coun… IL              8952          12261            22604        0.396\n 5 Brown Coun… IL               475           1776             2336        0.203\n 6 Bureau Cou… IL              6010           9264            16303        0.369\n 7 Calhoun Co… IL               739           1719             2556        0.289\n 8 Carroll Co… IL              2437           4428             7354        0.331\n 9 Cass County IL              1617           3216             5054        0.320\n10 Champaign … IL             49694          33235            89196        0.557\n# ℹ 1,990 more rows\n# ℹ 11 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>, pop <dbl>, female <dbl>, white <dbl>, black <dbl>,\n#   travel_time <dbl>, land_area <dbl>, hh_income <dbl>\n```\n\n\n:::\n:::\n\n\nLeft joins return all rows which are in `x`. If a column is in `x` but not in `y`, an `NA` will be included at this position. Right joins work vice versa and return all rows which are in `y`.\n\n#### `inner_join()`\n\nAn `inner_join()` returns all rows which are in `x` and `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  inner_join(demographic_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name, state)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000 × 17\n   name        state votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr>       <chr>          <dbl>          <dbl>            <dbl>        <dbl>\n 1 Adams Coun… IL              7633          22732            31770        0.240\n 2 Alexander … IL              1262           1496             2820        0.448\n 3 Bond County IL              2066           4884             7462        0.277\n 4 Boone Coun… IL              8952          12261            22604        0.396\n 5 Brown Coun… IL               475           1776             2336        0.203\n 6 Bureau Cou… IL              6010           9264            16303        0.369\n 7 Calhoun Co… IL               739           1719             2556        0.289\n 8 Carroll Co… IL              2437           4428             7354        0.331\n 9 Cass County IL              1617           3216             5054        0.320\n10 Champaign … IL             49694          33235            89196        0.557\n# ℹ 1,990 more rows\n# ℹ 11 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>, pop <dbl>, female <dbl>, white <dbl>, black <dbl>,\n#   travel_time <dbl>, land_area <dbl>, hh_income <dbl>\n```\n\n\n:::\n:::\n\n\n#### `full_join()`\n\nA `full_join()` returns rows and columns from both `x` and `y`.\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  full_join(demographic_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name, state)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,141 × 17\n   name        state votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr>       <chr>          <dbl>          <dbl>            <dbl>        <dbl>\n 1 Adams Coun… IL              7633          22732            31770        0.240\n 2 Alexander … IL              1262           1496             2820        0.448\n 3 Bond County IL              2066           4884             7462        0.277\n 4 Boone Coun… IL              8952          12261            22604        0.396\n 5 Brown Coun… IL               475           1776             2336        0.203\n 6 Bureau Cou… IL              6010           9264            16303        0.369\n 7 Calhoun Co… IL               739           1719             2556        0.289\n 8 Carroll Co… IL              2437           4428             7354        0.331\n 9 Cass County IL              1617           3216             5054        0.320\n10 Champaign … IL             49694          33235            89196        0.557\n# ℹ 3,131 more rows\n# ℹ 11 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>, pop <dbl>, female <dbl>, white <dbl>, black <dbl>,\n#   travel_time <dbl>, land_area <dbl>, hh_income <dbl>\n```\n\n\n:::\n:::\n\n\n\n#### `semi_join()`\n\nFiltering joins only keep the cases from `x`, no data set is added.\n\nThe `semi_join()` returns all rows from `x` with matching values in `y`. You can compare it to a `right_join()` but without adding the columns of `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  semi_join(demographic_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name, state)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000 × 10\n   name        state votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr>       <chr>          <dbl>          <dbl>            <dbl>        <dbl>\n 1 Adams Coun… IL              7633          22732            31770        0.240\n 2 Alexander … IL              1262           1496             2820        0.448\n 3 Bond County IL              2066           4884             7462        0.277\n 4 Boone Coun… IL              8952          12261            22604        0.396\n 5 Brown Coun… IL               475           1776             2336        0.203\n 6 Bureau Cou… IL              6010           9264            16303        0.369\n 7 Calhoun Co… IL               739           1719             2556        0.289\n 8 Carroll Co… IL              2437           4428             7354        0.331\n 9 Cass County IL              1617           3216             5054        0.320\n10 Champaign … IL             49694          33235            89196        0.557\n# ℹ 1,990 more rows\n# ℹ 4 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>\n```\n\n\n:::\n:::\n\n\n#### `anti_join()`\n\n`anti_join()` returns all rows from `x` with no matching rows in `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  anti_join(demographic_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name, state)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,141 × 10\n   name        state votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr>       <chr>          <dbl>          <dbl>            <dbl>        <dbl>\n 1 Onslow Cou… NC             17156          36342            55364        0.310\n 2 Orange Cou… NC             59105          18373            79830        0.740\n 3 Pamlico Co… NC              2427           4225             6772        0.358\n 4 Pasquotank… NC              8455           8082            16964        0.498\n 5 Pender Cou… NC              9086          17317            27072        0.336\n 6 Perquimans… NC              2291           4143             6595        0.347\n 7 Person Cou… NC              7772          11116            19303        0.403\n 8 Pitt County NC             40967          35191            78264        0.523\n 9 Polk County NC              3715           6738            10723        0.346\n10 Randolph C… NC             13074          49156            63615        0.206\n# ℹ 1,131 more rows\n# ℹ 4 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>\n```\n\n\n:::\n:::\n\n\n### `bind_rows()` and `bind_cols()`\n\nBinding tibbles together is made easy using the `bind_*()` functions. `bind_rows()` binds them together by rows, `bind_cols()` by columns. For the former, it is important that column names are matching. Otherwise, the non-matching ones will be added as separate columns and NAs introduced. IDs can be added by using the `.id =` argument, where the name of the id column can be specified.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data16 |> \n  semi_join(demographic_data) |> \n  bind_rows(election_data16 |>\n              anti_join(demographic_data),\n            .id = \"id\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name, state)`\nJoining with `by = join_by(name, state)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,141 × 11\n   id    name  state votes_dem_2016 votes_gop_2016 total_votes_2016 per_dem_2016\n   <chr> <chr> <chr>          <dbl>          <dbl>            <dbl>        <dbl>\n 1 1     Adam… IL              7633          22732            31770        0.240\n 2 1     Alex… IL              1262           1496             2820        0.448\n 3 1     Bond… IL              2066           4884             7462        0.277\n 4 1     Boon… IL              8952          12261            22604        0.396\n 5 1     Brow… IL               475           1776             2336        0.203\n 6 1     Bure… IL              6010           9264            16303        0.369\n 7 1     Calh… IL               739           1719             2556        0.289\n 8 1     Carr… IL              2437           4428             7354        0.331\n 9 1     Cass… IL              1617           3216             5054        0.320\n10 1     Cham… IL             49694          33235            89196        0.557\n# ℹ 3,131 more rows\n# ℹ 4 more variables: per_gop_2016 <dbl>, diff_2016 <dbl>, winner <chr>,\n#   partywinner16 <chr>\n```\n\n\n:::\n:::\n\n\nFor `bind_cols()`, the length has to be the same. Duplicated column names will be changed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data12 |> bind_cols(election_data16)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\n• `name` -> `name...1`\n• `state` -> `state...2`\n• `winner` -> `winner...6`\n• `partywinner16` -> `partywinner16...7`\n• `name` -> `name...10`\n• `state` -> `state...11`\n• `winner` -> `winner...18`\n• `partywinner16` -> `partywinner16...19`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,141 × 19\n   name...1         state...2 per_dem_2012 per_gop_2012 diff_2012 winner...6\n   <chr>            <chr>            <dbl>        <dbl>     <dbl> <chr>     \n 1 Adams County     IL               0.315        0.667     10744 Trump     \n 2 Alexander County IL               0.561        0.425       476 Trump     \n 3 Bond County      IL               0.412        0.559      1075 Trump     \n 4 Boone County     IL               0.463        0.520      1216 Trump     \n 5 Brown County     IL               0.333        0.640       724 Trump     \n 6 Bureau County    IL               0.489        0.491        33 Trump     \n 7 Calhoun County   IL               0.419        0.559       360 Trump     \n 8 Carroll County   IL               0.496        0.482       107 Trump     \n 9 Cass County      IL               0.422        0.557       657 Trump     \n10 Champaign County IL               0.520        0.452      5292 Clinton   \n# ℹ 3,131 more rows\n# ℹ 13 more variables: partywinner16...7 <chr>, winner12 <chr>,\n#   partywinner12 <chr>, name...10 <chr>, state...11 <chr>,\n#   votes_dem_2016 <dbl>, votes_gop_2016 <dbl>, total_votes_2016 <dbl>,\n#   per_dem_2016 <dbl>, per_gop_2016 <dbl>, diff_2016 <dbl>, winner...18 <chr>,\n#   partywinner16...19 <chr>\n```\n\n\n:::\n:::\n\n\n### Further links\n\n-   [Chapter in R4DS](https://r4ds.had.co.nz/transform.html)\n-   More on window functions in the vignette: `vignette(\"window-functions\")`\n-   Again, [the cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/data-transformation.pdf)\n-   A [tutorial on YouTube](https://www.youtube.com/watch?v=jWjqLW-u3hc)\n-   Another introduction can be found [here](https://stat545.com/join-cheatsheet.html).\n-   The [chapter in R4DS](https://r4ds.had.co.nz/relational-data.html) has some nice diagrams.\n-   You can also consult the `introverse` package if you need help with the packages covered here -- `introverse::show_topics(\"dplyr\")` will give you an overview of `dplyr`'s functions, and `get_help(\"name of function\")` will help you with the respective function.\n\n### Exercises\n\nOpen the IMDb file.\n\n1.  Find the duplicated movie. How could you go across this?\n2.  Which director has made the longest movie?\n3.  What's the highest ranked movie?\n4.  Which movie got the most votes?\n5.  Which movie had the biggest revenue in 2016?\n6.  How much revenue did the movies in the data set make each year in total?\n7.  Filter movies following some conditions:\n    a.  More runtime than the average runtime (hint: you could also use `mutate()` before).\n    b.  Movies directed by J. J. Abrams.\n    c.  More votes than the median of all of the votes.\n    d.  The movies which have the most common value (the mode) in terms of rating (`mode()` does exist but will not work in the way you might like it to work -- run the script below and use the `my_mode` function).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## helper function for mode\n\nmy_mode <- function(x){ \n    ta = table(x)\n    tam = max(ta)\n    if (all(ta == tam))\n         mod = NA\n    else\n         if(is.numeric(x))\n    mod = as.numeric(names(ta)[ta == tam])\n    else\n         mod = names(ta)[ta == tam]\n    return(mod)\n}\n```\n:::\n\n\n## Visualizations with `ggplot2` {#visualization}\n\n> \"The purpose of visualization is insight, not pictures.\" -- Ben A. Shneiderman\n\nIn R, the dominant package for visualizing data is `ggplot2` which belongs to the tidyverse.\n\n### The \"layered grammar of graphics\"\n\n`ggplot2` works with tibbles and the data needs to be in a tidy format. It builds graphics using \"the layered grammar of graphics.\" [@wickham_layered_2010]\n\n\n::: {.cell}\n\n```{.r .cell-code}\npublishers <- read_csv(\"data/publishers_with_places.csv\")\n  \npublishers_filtered <- publishers |> \n  group_by(city) |> \n  filter(n() > 5) |> \n  drop_na()\n```\n:::\n\n\nThis implies that you start with a base layer -- the initial `ggplot2` call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npublishers_filtered |> \nggplot()\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\nThe initial call produces an empty coordinate system. It can be filled with additional layers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = publishers_filtered) +\n  geom_bar(aes(x = city)) \n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\nUnlike the remainder of the tidyverse, `ggplot2` uses a `+` instead of the pipe `|>`. If you use the pipe by accident, it will not work and an (informative) error message will appear.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(data = publishers_filtered) |> \n#   geom_bar(aes(x = city)) \n```\n:::\n\n\n### The layers\n\nIn general, a call looks like this:\n\n\n\nAs you might have seen above, I provided the data in the initial `ggplot` call. Then, when I added the layer -- the `geom_bar()` for a bar plot -- I had to provide the mapping -- which variables I wanted to plot -- using `aes()`. This is referred to as the `aesthetics`. In my case, I wanted the cities to be projected to the x-axis. Since I was using `geom_bar` to create a bar plot, the number of occurrences of the respective cities were automatically counted and depicted on the y-axis. There are more `geom_*` functions and they all create different plots. Whether you can use them or not depends on the data you have at hand and/or the number of variables you want to plot. In the following, I will give you a brief overview of the most important geoms.\n\n#### One variable\n\nIf you only want to display one variable, the x- or y-axis, as you choose, will depict the variable's value. The counterpart will display the frequency or density of those values.\n\n##### One variable -- discrete\n\nHere, the only possible kind of visualization is a bar plot as shown above. If the visualization should look more fancy, e.g., with colored bars, you have several arguments at hand. If they should not be different for different kinds of data, they need to be specified outside the `aes()`. There are always different arguments and you can look them up using `?<GEOM_FUNCTION>` and then looking at the Aesthetics section. Apart from that, you can also look at the [`ggplot2` cheatsheet](https://rstudio.com/wp-content/uploads/2015/12/ggplot2-cheatsheet-2.0.pdf).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = publishers_filtered) +\n  geom_bar(aes(x = city), fill = \"blue\") \n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n##### One variable -- continuous\n\nIf you want to display a continuous variable's distribution of values, you can use a histogram. Its `geom_*` function is `geom_histogram()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard <- read_csv(\"data/billboard.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 317 Columns: 79\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (2): artist, track\ndbl  (65): wk1, wk2, wk3, wk4, wk5, wk6, wk7, wk8, wk9, wk10, wk11, wk12, wk...\nlgl  (11): wk66, wk67, wk68, wk69, wk70, wk71, wk72, wk73, wk74, wk75, wk76\ndate  (1): date.entered\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nsong_tbl <- billboard |> \n  distinct(artist, track) |> \n  mutate(song_id = row_number())\n\nrank_tbl <- billboard |> \n  pivot_longer(cols = starts_with(\"wk\"), \n               names_to = \"week\", \n               names_prefix = \"wk\", \n               values_to = \"rank\") |> \n  mutate(week = as.numeric(week),\n         date = date.entered + (week-1) * 7) |> \n  drop_na() |> \n  left_join(song_tbl, by = c(\"artist\", \"track\")) |> \n  select(song_id, date, week, rank)\n```\n:::\n\n\nHow does the distribution of songs over the weeks look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rank_tbl) +\n  geom_histogram(aes(x = week))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\nA smoothed histogram is `geom_density()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rank_tbl) +\n  geom_density(aes(x = week))\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n#### Two variables\n\nIn the majority of cases, you will want to display the relationship between two variables, one on the x- and the other one on the y-axis.\n\n##### Both continuous\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounty_data_midwest <- socviz::county_data |> \n  filter(census_region == \"Midwest\") |> \n  drop_na()\n```\n:::\n\n\nIf both variables are continuous, the easiest option is to use a scatter plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_point(aes(x = per_dem_2016, y = per_gop_2016))\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\nIf you don't like dots, the `shape =` argument allows you to change the shape of the data points. There are also other arguments to change, for instance, transparency (`alpha =`) or size (`size =`). Find an overview of the allowed aesthetic specifications [here](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_point(aes(x = per_dem_2016, y = per_gop_2016), \n             shape = \"cross\", \n             size = 2)\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\nHere, it might make sense to color the points according to a categorical variable (state, in this case). If so, a legend is added which maps the colors to their respective values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_point(aes(x = per_dem_2016, y = per_gop_2016)) \n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\nSince I look at the relationship between votes for the Republicans and the Democrats, and the U.S. is a two-party system, there is a fairly clear relationship between them both. This can also be depicted using `geom_smooth()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_smooth(aes(x = per_dem_2016, y = per_gop_2016, color = state))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\nHere, `color = state` has a different effect: each dimension of the categorical variable gets its own line.\n\nIf you do not want it to be smoothed, just use `geom_line()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_line(aes(x = per_dem_2016, y = per_gop_2016), color = \"grey\") \n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\n##### Discrete X, continuous Y\n\nIn this case, different categories of data will be put on the x-axis and some of their properties will be displayed on the y-axis. The probably most prominent example for this type of plot is a box plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_boxplot(aes(x = state, y = per_gop_2016))\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n\n##### Both discrete\n\nIt is rarely the case that you want to depict two categorical variables in one plot. If so, you can use `geom_jitter()`. It is related to `geom_point()`. The difference is that with `geom_jitter()`, a little bit of noise is added to the dots, making them appear distinct.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_jitter(aes(x = state, y = winner))\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\nAs opposed to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_point(aes(x = state, y = winner))\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n\n### Making graphs \"publishable\"\n\nSo far, I have only added one layer to the plot. This suffices for the most basic visualizations. The good thing about R and RMarkdown is, however, that you can write entire publications only using their means. Hence, the plots need to look awesome. This section is dedicated to how you can achieve this. First, I will touch upon how you can make them look good using `scales`. `labs()` allow you to add titles, captions, and axis labels. Finally, `facet_*` allows you to plot multiple plots into one.\n\n#### Scales\n\nScales can be used to take control of how the data's values are mapped to the aesthetic's visual values. You can find a more exhaustive tutorial on them [here](https://www3.nd.edu/~steve/computing_with_data/12_Scales_themes/scales_themes.html).\n\n-   `scale_*_continuous` -- for dealing with continuous values. (you can find an exhaustive list of colors in R [here](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf))\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = county_data_midwest) +\n  geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = white)) +\n  scale_x_continuous(limits = c(0, 1)) +\n  scale_y_continuous(limits = c(0, 1)) +\n  scale_color_gradient(low = \"green\",\n                       high = \"red\")\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-82-1.png){width=672}\n:::\n:::\n\n\n-   `scale_*_discrete` -- for dealing with discrete values\n-   `scale_*_manual` -- manually mapping discrete values to visual values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  filter(state %in% c(\"IA\", \"IL\", \"IN\", \"KS\")) |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = state)) +\n    scale_color_manual(values = c(\"IA\" = \"blue\", \n                                  \"IL\" = \"green\", \n                                  \"IN\" = \"red\", \n                                  \"KS\" = \"purple\"),\n                       name = \"State\",\n                       labels = c(\"Iowa\", \"Illinois\", \"Indiana\", \"Kansas\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-83-1.png){width=672}\n:::\n:::\n\n\n#### Adding titles, captions, etc.\n\nNow you have modified the scales and colors -- there is a lot more to be modified if you want to -- but you have not added a meaningful title, a nice caption (where were the data obtained?), and the axes do not have proper names, too. This can be achieved using `labs()` (which is the abbreviation for labels).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  filter(state %in% c(\"IA\", \"IL\", \"IN\", \"KS\")) |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = state)) +\n    scale_color_manual(values = c(\"IA\" = \"blue\", \n                                  \"IL\" = \"green\", \n                                  \"IN\" = \"red\", \n                                  \"KS\" = \"purple\"),\n                       name = \"State\",\n                       breaks = waiver(),\n                       labels = c(\"Iowa\", \"Illinois\", \"Indiana\", \"Kansas\")) +\n    scale_x_continuous(limits = c(0, 1)) +\n    scale_y_continuous(limits = c(0, 1)) +\n    ggtitle(\"Relationship between percentages of votes for Democrats and Republicans in selected states in the Midwest\") +\n    xlab(\"Percentage of votes for the Democrats in 2016\") +\n    ylab(\"Percentage of votes for the Republicans in 2016\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n:::\n\n\nWell, that doesn't look good, the title is too long. Inserting `\\n` -- for new line -- will do the trick.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  filter(state %in% c(\"IA\", \"IL\", \"IN\", \"KS\")) |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = state)) +\n    scale_color_manual(values = c(\"IA\" = \"blue\", \"IL\" = \"green\", \"IN\" = \"red\", \"KS\" = \"purple\"),\n                      name = \"State\",\n                      breaks = waiver(),\n                      labels = c(\"Iowa\", \"Illinois\", \"Indiana\", \"Kansas\")) +\n    scale_x_continuous(limits = c(0, 1)) +\n    scale_y_continuous(limits = c(0, 1)) +\n    ggtitle(\"Relationship between percentages of votes for Democrats \\nand Republicans in selected states in the Midwest\") +\n    xlab(\"Percentage of votes for the Democrats in 2016\") +\n    ylab(\"Percentage of votes for the Republicans in 2016\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-85-1.png){width=672}\n:::\n:::\n\n\nHowever, providing it with three different layers just for labeling is pretty tedious. This is where `labs()` comes in handy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  filter(state %in% c(\"IA\", \"IL\", \"IN\", \"KS\")) |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = state)) +\n    scale_color_manual(values = c(\"IA\" = \"blue\", \"IL\" = \"green\", \"IN\" = \"red\", \"KS\" = \"purple\"),\n                      name = \"State\",\n                      breaks = waiver(),\n                      labels = c(\"Iowa\", \"Illinois\", \"Indiana\", \"Kansas\")) +\n    scale_x_continuous(limits = c(0, 1)) +\n    scale_y_continuous(limits = c(0, 1)) +\n    labs(title = \"Relationship between percentages of votes for Democrats \\nand Republicans in selected states in the Midwest\",\n         caption = \"Data obtained from the socviz R package\",\n         x = \"Percentage of votes for the Democrats in 2016\",\n         y = \"Percentage of votes for the Republicans in 2016\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-86-1.png){width=672}\n:::\n:::\n\n\n#### Facets\n\nThe original data set consists of four different census regions. If I were to compare them, I could color them accordingly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  drop_na() |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = census_region)) +\n    scale_x_continuous(limits = c(0, 1)) +\n    scale_y_continuous(limits = c(0, 1)) +\n    scale_color_discrete()\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-87-1.png){width=672}\n:::\n:::\n\n\nDespite the coloring according to the different states, it is still hard to assess whether there really are differences. Apart from that, I would like to assess the impact the percentage of white people in the population has. This would be easier if I put them into individual graphs. I can achieve this using so-called facets. Facets enable me to divide the plot into subplots based on categorical variables. `facet_wrap()` puts them into a rectangular layout. The categorical variable needs to be provided prefixed with a tilde `~`, `nrow` determines the number of rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  drop_na() |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = white)) +\n    scale_x_continuous(limits = c(0, 1)) +\n    scale_y_continuous(limits = c(0, 1)) +\n    scale_color_gradient(low = \"green\",\n                         high = \"red\") +\n    facet_wrap(vars(census_region),\n               nrow = 2)\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n\nApart from that, I can also spread it out using two different variables. Here, I will look at differences in the distribution of whites in the counties split up by who won in 2016 and 2012. This can be achieved using `facet_grid(categorical_variable_1~categorical_variable_2)`. The former one will be put into rows, the latter into columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  drop_na() |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = white)) +\n    scale_x_continuous(limits = c(0, 1)) +\n    scale_y_continuous(limits = c(0, 1)) +\n    scale_color_gradient(low = \"green\",\n                         high = \"red\") +\n    facet_grid(winner~winner12)\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n\nIf you want to facet using only one variable, put a dot at where the other variable would stand otherwise...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsocviz::county_data |> \n  drop_na() |> \n  ggplot() +\n    geom_point(aes(x = per_dem_2016, y = per_gop_2016, color = white)) +\n    scale_x_continuous(limits = c(0, 1)) +\n    scale_y_continuous(limits = c(0, 1)) +\n    scale_color_gradient(low = \"green\",\n                         high = \"red\") +\n    facet_grid(.~winner)\n```\n\n::: {.cell-output-display}\n![](2_r_catch-up_files/figure-html/unnamed-chunk-90-1.png){width=672}\n:::\n:::\n\n\n... or just use `facet_wrap()`.\n\n### Exporting graphics\n\nIf you include the graphics in an RMarkdown document, make sure you use the proper chunk options (i.e., `{r echo=FALSE, message=FALSE, warning=FALSE}`).\n\nIf you, however, want to export it and put it into an MS Word document or so, you can just use the `ggsave()` function. By default, it just takes the last plot that has been created and saves it to a path that needs to be specified. If it contains a file extension, `ggsave()` just uses this one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg, wt)) +\n  geom_point()\n\nggsave(\"mtcars.pdf\", device = \"pdf\") #save it to pdf\nggsave(\"mtcars.png\") #save it to png\n\nggsave(\"mtcars.pdf\", width = 4, height = 4) #specify width and height -- in inches by default\nggsave(\"mtcars.pdf\", width = 20, height = 20, units = \"cm\") #change unit using the units argument\n```\n:::\n\n\n### Further readings\n\n-   [ggplot2 cheatsheet.](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf)\n-   [ggplot2 -- the book.](https://ggplot2-book.org)\n-   The [graphic cookbook for R](http://www.cookbook-r.com/Graphs/).\n-   Another [tutorial](http://r-statistics.co/ggplot2-Tutorial-With-R.html).\n-   A [full-on online course by Kieran Healy](https://socviz.co) (comes with an R package as well).\n-   Need some inspiration? Check out the [graph gallery](https://r-graph-gallery.com).\n-   The `ggsave()` function [in further detail](https://ggplot2.tidyverse.org/reference/ggsave.html).\n-   You can also consult the `introverse` package. `introverse::show_topics(\"ggplot2\")` will give you overviews of the respective package's functions, and `get_help(\"name of function\")` will help you with the respective function.\n\n### Exercises\n\nUse the IMDb file.\n\nTry to think about how you could answer the following questions graphically. If you fail, take a look at the hints.\n\n1.  Do higher rated movies generate more revenue?\n    a.  Plot revenue and rating as a scatter plot.\n    b.  Do you think there is a correlation? How could you make stronger claims about it? Maybe even graphically?\n    c.  Interpret the plot.\n    d.  Add a nice title and labels.\n2.  How evenly are the different years' movies represented? (Why would it be pointless to make claims about the productivity of directors?)\n    a.  Make a bar plot.\n    b.  Interpret the plot.\n    c.  Add a nice title and labels.\n3.  Which year was the best for cinema fetishists? (When could they watch the most highest rated movies?)\n    a.  Make a box plot.\n    b.  Interpret the plot.\n    c.  Add a nice title and labels.\n\n## Iteration\n\nWe also will work with lists. Lists can contain elements of different lengths (which distinguishes them from tibbles). This makes them especially suitable for web scraping. Other than (atomic) vectors they are not just vectorized since they can contain elements of all different kinds of format.\n\nTo iterate over lists, we have the `map()` family from the `purrr` package, which applies functions over lists. `pluck()` extracts elements from the list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_list <- list(first_element = 1:4, 4:6, 10:42)\nstr(raw_list) # shows you the elements of the list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ first_element: int [1:4] 1 2 3 4\n $              : int [1:3] 4 5 6\n $              : int [1:33] 10 11 12 13 14 15 16 17 18 19 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nmap(raw_list, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$first_element\n[1] 2.5\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 26\n```\n\n\n:::\n\n```{.r .cell-code}\nmap(raw_list, ~{mean(.x) |> sqrt()})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$first_element\n[1] 1.581139\n\n[[2]]\n[1] 2.236068\n\n[[3]]\n[1] 5.09902\n```\n\n\n:::\n\n```{.r .cell-code}\nmap_dbl(raw_list, mean) # by specifying the type of output, you can reduce the list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfirst_element                             \n          2.5           5.0          26.0 \n```\n\n\n:::\n\n```{.r .cell-code}\nraw_list |> pluck(1) == raw_list |> pluck(\"first_element\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\nThis can also be achieved using a loop. Here, you use an index to loop over objects and do something to their elements. Typically, you create an empty list before and put the new output at the respective new position.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_list <- vector(mode = \"list\", length = length(raw_list))\nfor (i in seq_along(raw_list)){\n  new_list[[i]] <- mean(raw_list[[i]])\n}\n```\n:::\n\n\n## Flow Control, Functional programming, and iterations {#functionalprogramming}\n\n\n::: {.cell}\n\n:::\n\n\nSo far, you have learned heaps of data wrangling and analyses, but no real customization of R. This will change now, as you will be introduced to functions. Furthermore, the operations have only been applied to one singular object (read vector or data.frame/tibble). Iteration means that you perform the same operation on multiple objects/data sets/you name it.\n\nToday's session will all be about following the DRY principle. DRY stands for Don't Repeat Yourself. \n\n\"Why not?,\" you may ask. Well, the problem with copy-and-pasting code is that you have to change all the variable names in every instance of your code. RStudio has a nice Search-and-Replace function which might facilitate that, but this practice still bears the danger of writing code that contains errors. This is where you will need to make use of the tools that R offers to iterate over a couple of elements, perform operations on them, and return the results. An example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_strings <- c(\"this\", \"is\", \"how\", \"a\", \"for\", \"loop\", \"works\")\n\nfor (i in seq_along(example_strings)) {\n  print(example_strings[[i]])\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this\"\n[1] \"is\"\n[1] \"how\"\n[1] \"a\"\n[1] \"for\"\n[1] \"loop\"\n[1] \"works\"\n```\n\n\n:::\n:::\n\n\nAnother option -- from the tidyverse -- is the `purrr` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwalk(example_strings, print)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this\"\n[1] \"is\"\n[1] \"how\"\n[1] \"a\"\n[1] \"for\"\n[1] \"loop\"\n[1] \"works\"\n```\n\n\n:::\n:::\n\n\nSo, what has this code done? In both cases, it has taken the function `print()` and applied it to every element of our vector. Copying-and-pasting would have looked like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(example_strings[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(example_strings[[2]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"is\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(example_strings[[3]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"how\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(example_strings[[4]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(example_strings[[5]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"for\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(example_strings[[6]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"loop\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(example_strings[[7]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"works\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(example_strings[[7]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"works\"\n```\n\n\n:::\n:::\n\n\nDamn, I pasted the last instance twice. In this case, the mistake is obvious, but oftentimes it is not.\n\nIn the following, I will provide you a more extensive introduction into conditional statements, functions, loops, and the `purrr` (and it's parallelized counter-part `furrr`) package.\n\n### Flow control\n\nSometimes you want your code to only run in specific cases. For `mutate()`, I have already showed you conditional imputation of values with `case_when()`. A more generalized approach for conditionally running code in R are `if` statements. They look as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (conditional_statement evaluates to TRUE) {\n  do_something\n}\n```\n:::\n\n\nThey also have an extension -- `if…else`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (conditional_statement evaluates to TRUE) {\n  do_something\n} else {\n  do_something_else\n}\n```\n:::\n\n\nImagine that I want R to tell me whether a number it draws is smaller than or equal to five:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nx <- sample(10, 1)\n\nif (x <= 5) {\n  print(\"x is smaller than or equals 5\")\n} \n```\n:::\n\n\nIn this case, x is 3, so the if statement returns something. If this is not the case, nothing happens:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\nx <- sample(10, 1)\n\nif (x <= 5) {\n  print(\"x is smaller than or equals 5\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is smaller than or equals 5\"\n```\n\n\n:::\n:::\n\n\nNow I could extend it by another `if` statement:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nx <- sample(10, 1)\n\nif (x <= 5) {\n  print(\"x is smaller than or equals 5\")\n}\nif (x > 5) {\n  print(\"x is greater than 5\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is greater than 5\"\n```\n\n\n:::\n:::\n\n\nHere, x is 10, so only the second if statement returns something.\n\nBut the `else` allows me to take a shortcut and write it more concisely:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (x <= 5) {\n  print(\"x is smaller than or equals 5\")\n} else {\n  print(\"x is greater than 5\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x is greater than 5\"\n```\n\n\n:::\n:::\n\n\nPlease note that the condition inside the if statement needs to be a vector of type logical (hence, either `TRUE` or `FALSE`). Apart from that, only vectors of length 1 are allowed. The following will not work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (c(TRUE, FALSE, TRUE)) {\n  print(\"example\")\n} #This will throw an error!!!\n```\n:::\n\n\n### Functions\n\nSo far, every call you have made within R contained a function. Even the most basic operations, such as `c()` for building vectors, rely on functions. Functions are the verbs of R, they *do* something to your objects. Hence, you as someone who obeys the principles of DRY can make good use of them. Whenever you need to copy code to perform certain tasks to an object, you can also put those tasks into a function and just provide the function with the objects.\n\nImagine you want to rescale some variables in a tibble (an example I took from the OG version of R4DS [@wickham_data_2016]):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndf <- tibble(\n  a = rnorm(10),\n  b = rnorm(10),\n  c = rnorm(10),\n  d = rnorm(10)\n)\n\ndf$a <- (df$a - min(df$a, na.rm = TRUE)) / \n  (max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))\ndf$b <- (df$b - min(df$b, na.rm = TRUE)) / \n  (max(df$b, na.rm = TRUE) - min(df$b, na.rm = TRUE))\ndf$c <- (df$c - min(df$c, na.rm = TRUE)) / \n  (max(df$c, na.rm = TRUE) - min(df$c, na.rm = TRUE))\ndf$d <- (df$d - min(df$d, na.rm = TRUE)) / \n  (max(df$d, na.rm = TRUE) - min(df$d, na.rm = TRUE))\n```\n:::\n\n\nGiven that you now know how to loop over the tibble, you can certainly reduce the amount of copy-pasting here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  a = rnorm(10),\n  b = rnorm(10),\n  c = rnorm(10),\n  d = rnorm(10)\n)\n\nfor (i in seq_along(df)) {\n  df[[i]] <- (df[[i]] - min(df[[i]], na.rm = TRUE)) / \n  (max(df[[i]], na.rm = TRUE) - min(df[[i]], na.rm = TRUE))\n}\n```\n:::\n\n\nHowever, the operation within the loop is generalizable: it always only takes a vector of numeric values as input, performs some actions on them and returns another vector of the same length, but rescaled into a range from 0 to 1. Hence, the operation fulfills the requirements for putting it into a function.\n\nDoing so has some advantages:\n\n-   If an error occurs, you can simply change the function in one place -- when you define it -- instead of changing all the occurrences in your code\n-   It will certainly make your code easier to read -- `rescale0to1` is a more concise description than `(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))` (--> you see what I did here? I already replaced the arguments with a generic variable. You can use it to write the function yourself.)\n\n#### Writing your own functions\n\nWhen you define functions in R, you need to follow a certain structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name <- function(argument_1, argument_2, argument_n) {\n  function_body\n}\n```\n:::\n\n\n-   The `function_name` is the thing you will call (e.g., `mean()`). In general, it should be a verb, it should be concise, and it should be in_snakecase.\n-   The `argument`s are what you need to provide the function with (e.g., `mean(`*1:10*`)`).\n-   The `function body` contains the operations which are performed to the arguments. It can contain other functions as well -- which need to be defined beforehand (e.g., `sum(1:10) / length(1:10)`)). It is advisable to split up the function body into as little pieces as you can.\n\n#### An example: Roulette\n\nIn the following, I will guide you through a quick example on how you could use functions to play an extremely basic game of Roulette with R. You provide it with two values (how much you bet and which number you choose) and R takes care of the rest.\n\nSo what does the function need to do? First, it needs to draw a number between 0 and 36. Second, it needs to compare the bet and its corresponding number. Third, it needs to return the respective result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_roulette <- function(bet, number) {\n  draw <- sample(0:36, 1)\n  tibble(\n    winning_number = draw,\n    your_number = number,\n    your_bet = bet,\n    your_return = if (number == draw) {\n      bet * 36\n    } else {\n      0\n    }\n  )\n}\n\nplay_roulette(bet = 1, number = 35)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  winning_number your_number your_bet your_return\n           <int>       <dbl>    <dbl>       <dbl>\n1             15          35        1           0\n```\n\n\n:::\n:::\n\n\nBut how to make sure that I do not bet on a number which I cannot bet on (i.e., numbers greater than 36)? Or, put differently, how to forbid values? Use `stop()`. Besides, how to set default values for the arguments? Just use `argument = default`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_roulette_restricted <- function(bet = 1, number) {\n  if (number > 36) stop(\"You can only bet on numbers between 0 and 36.\")\n  draw <- sample(0:36, 1)\n  tibble(\n    winning_number = draw,\n    your_number = number,\n    your_bet = bet,\n    your_return = if (number == draw) {\n      bet * 36\n    } else {\n      0\n    }\n  )\n  #return(tbl_return)\n}\nplay_roulette_restricted(number = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  winning_number your_number your_bet your_return\n           <int>       <dbl>    <dbl>       <dbl>\n1              1           3        1           0\n```\n\n\n:::\n:::\n\n\nThe function returns the results of the last call, i.e., the tibble. If you want to be more concrete about what it should return -- or make an earlier return -- use `return()`. The function will stop as soon as it hits a `return()` statement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_roulette_basic <- function(bet = 1, number) {\n  if (number > 36) stop(\"You can only bet on numbers between 0 and 36.\")\n  draw <- sample(0:36, 1)\n  if (number == draw) {\n    return(str_c(\"Nice, you won\", as.character(bet * 36), \"Dollars\", sep = \" \"))\n  } else {\n    return(\"I'm sorry, you lost.\")\n  }\n}\nplay_roulette_basic(number = 35)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I'm sorry, you lost.\"\n```\n\n\n:::\n:::\n\n\n#### Functional programming with `tidyverse` functions\n\nThe majority of `dplyr` verbs uses so-called tidy evaluation which is a framework for controlling how expressions and variables in your code are evaluated by the tidyverse functions. The two main things here are **data masking** and **tidy selection**. The former facilitates computing on values within the data set and refers to functions such as `filter()`, where you can just type in variable names instead of tediously typing `name_of_df$var_name`. The latter aims to facilitate working with the columns in the data set. It is provided by the `tidyselect` package and allows you, for instance, to work with code such as `tbl |> select(starts_with(\"a\"))`. More examples can be acquired using `?dplyr_tidy_select`.\n\nI will not go into detail here but rather stick to what implications this has to you. If you are interested in the theoretical underpinnings, read the chapter on \"Metaprogramming\" in [Advanced R by Hadley Wickham](http://adv-r.had.co.nz).\n\nIf your function takes a user-supplied variable as an argument, you need to consider this arguments in the pipeline. For instance, the following function calculates the mean, median, and standard deviation of a variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_summary <- function(tbl, var) {\n  tbl |> \n    summarize(\n      mean = mean({{ var }}),\n      median = median({{ var }}),\n      sd = sd({{ var }})\n    )\n}\n\nmtcars |> my_summary(cyl) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mean median       sd\n1 6.1875      6 1.785922\n```\n\n\n:::\n:::\n\n\nIf the variable names are supplied in a character vector, you need `all_of()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_mean <- function(data, vars) {\n  data |> summarize(n = n(), across({{ vars }}, mean))\n}\n\nmtcars |> \n  group_by(cyl) |> \n  summarize_mean(all_of(c(\"hp\", \"mpg\"))) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3\nColumns: 4\n$ cyl <dbl> 4, 6, 8\n$ n   <int> 11, 7, 14\n$ hp  <dbl> 82.63636, 122.28571, 209.21429\n$ mpg <dbl> 26.66364, 19.74286, 15.10000\n```\n\n\n:::\n:::\n\n\nAnother handy thing is changing the variable names in the output depending on the input names. Here, you can use [glue](https://github.com/tidyverse/glue) syntax and `:=`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_summary_w_names <- function(tbl, var){\n  tbl |> \n    summarize(\n      \"mean_{{ var }}\" := mean({{ var }}),\n      \"median_{{ var }}\" := median({{ var }}),\n      \"sd_{{ var }}\" := sd({{ var }})\n    )\n}\n\nmtcars |> my_summary_w_names(cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mean_cyl median_cyl   sd_cyl\n1   6.1875          6 1.785922\n```\n\n\n:::\n:::\n\n\nFind more on programming with `dplyr` in [this vignette](https://cran.r-project.org/web/packages/dplyr/vignettes/programming.html).\n\n#### Further readings\n\nIf you want to learn more about functional programming, check out the following resources:\n\n-   The [R4DS chapter](https://r4ds.had.co.nz/functions.html)\n-   [A basic tutorial](https://www.tutorialspoint.com/r/r_functions.htm)\n-   A [book chapter](https://b-rodrigues.github.io/modern_R/defining-your-own-functions.html#writing-your-own-functions) about control-flow and functions\n-   [Hadley on functional programming](http://adv-r.had.co.nz/Functional-programming.html)\n\n### Iteration\n\nStrictly speaking, there are three kinds of loops: `for`, `repeat`, and `while`. I will touch upon `for` and `while`, because they are more straight-forward than `repeat`. `repeat loops` will repeat a task until you tell it to stop by hitting the escape button or adding a condition up front. Interactive programming -- sitting in front of your machine and hitting the escape button to break a loop -- is no desired practice and `while loops` have internalized the condition already. Hence, `repeat loops` do not appear to have any advantage and I leave them out deliberately.\n\n#### `for` loops\n\n`for` loops are the sort of loops you will have to work with more often as they allow you to loop *over* a predefined number of elements. For this sake, I will briefly revise how you index vectors, lists, and tibbles.\n\nThe ith element of a vector can be accessed by using either `[[i]]` or `[i]`.\n\nThe ith element of a list can be obtained by using `[[i]]` -- `[i]` would return a sub-list instead of the element. The second element of the ith element in a list (if it were a vector or a list) can be obtained using `[[i]][[2]]` etc.\n\nThe ith column of a tibble can be accessed as a vector using `[[i]]`. The second value of the ith column of a tibble can be accessed using `[[i]][[2]]`\n\nHow does that matter for `for` loops? Remember the example I showed you in the beginning? All a `for` loop does is iterating over a vector of values and imputing them instead of a placeholder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_strings <- c(\"this\", \"is\", \"how\", \"a\", \"for\", \"loop\", \"works\")\n\nfor (i in example_strings) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this\"\n[1] \"is\"\n[1] \"how\"\n[1] \"a\"\n[1] \"for\"\n[1] \"loop\"\n[1] \"works\"\n```\n\n\n:::\n:::\n\n\nFor a more general approach, you can also loop over the indices of the vector using `seq_along()` which creates a `seq`uence `along` a vector. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq_along(example_strings) # seq_along looks like this\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6 7\n```\n\n\n:::\n:::\n\n\nThis is especially useful if you want to modify the elements of a vector or a tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_along(example_strings)) {\n  print(example_strings[[i]])\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this\"\n[1] \"is\"\n[1] \"how\"\n[1] \"a\"\n[1] \"for\"\n[1] \"loop\"\n[1] \"works\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#Hence, the first iteration looks like this.\nprint(example_strings[[seq_along(example_strings)[[1]]]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# translates to\nprint(example_strings[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this\"\n```\n\n\n:::\n:::\n\n\n\nNow that you have seen the general approach for using a `for` loop, how can you use them in practice for data manipulation? Whenever you use a `for` loop, you need to follow a three step approach:\n\n-   Output: In the beginning, you need to create a vector that we can fill with output. You also need to determine the length of the vector in the beginning. This is due to efficiency: if you were to grow the vector by every iteration (using `c`), the loop becomes very slow. This is especially important if you work with large data sets. An example for creating an empty vector of a certain length is `output <- vector(mode = \"numeric\", length = length_of_output)`.\n-   Sequence: `i in seq_along(variable)` tells the `for loop` what to loop over.\\\n-   Body: The actual code. Performs the operation on the respective instance and stores the resulting value in the pre-defined output vector at position `i`. \n\n`for loops` are considered slow. They are not, at least not if you stick to the following rules:\n\n-   Always pre-allocate space -- make sure that R does not have to expand your objects\n-   Do as much as you can outside the loop -- every operation inside the loop will be repeated every time the loop is repeated\n\nIn general, you will come across three different problems with `for loops`.\n\n-   Modifying an existing object\n-   Length of output is unknown\n-   Sequences are of unknown length\n\n##### Modifying the existing object\n\nSometimes you want to modify an existing object rather than creating a new one. This is useful when working with large datasets or when you need to update values in place.\n\nBasic example: Standardizing columns\nLet's say you have a dataset with test scores that you want to standardize (mean = 0, sd = 1):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores <- tibble(\n  student_id = 1:5,\n  math = c(85, 92, 78, 88, 95),\n  science = c(90, 85, 80, 92, 88),\n  english = c(88, 90, 85, 86, 92)\n)\n\nfor (col in c(\"math\", \"science\", \"english\")) {\n  scores[[col]] <- (scores[[col]] - mean(scores[[col]])) / sd(scores[[col]])\n}\n\nscores |> \n  summarize(across(c(math, science, english), \n                   list(mean = mean, sd = sd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  math_mean math_sd science_mean science_sd english_mean english_sd\n      <dbl>   <dbl>        <dbl>      <dbl>        <dbl>      <dbl>\n1  8.88e-16       1     7.22e-17          1    -9.77e-16          1\n```\n\n\n:::\n:::\n\n\n##### Length of output is unknown\n\nSometimes, you do not know how long your output object is. This is, for instance, if you simulate vectors of random length. Normally, you would just put the values into a vector. However, if you do not know the length, then you would have to ask R to grow the vector every iteration. But this is extremely inefficient. \n\nFor this, the solution is `lists`. You always know how many iterations your loop will have. Hence, you can create a list of this exact length and then just store the results in the list (as lists do not care about the length of the singular elements). Afterwards, you can `unlist()` or `flatten_*()` the list into a vector. \n\n\n::: {.cell}\n\n```{.r .cell-code}\na_list <- vector(mode = \"list\", length = 10L)\n\nfor (i in seq_along(a_list)) {\n  len <- sample(1:10, 1)\n  a_list[[i]] <- rnorm(len)\n}\n\na_list |> \n  unlist() # or unlist(a_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0.69760871  0.54999735 -0.40273198 -0.19159377 -1.19452788 -0.05315882\n [7] -1.43192024 -2.01016571  0.33832922  0.65128696  2.43315152  1.19133821\n[13]  0.92244282  0.62109737  0.35633348 -0.47471847  0.06599349 -0.50247778\n[19]  2.18711916 -0.58172745  0.70008023  1.49217658 -0.05210512 -0.19593462\n[25] -0.64906975 -1.10976723  0.84927420 -0.01394090  0.16863694  0.86926335\n[31] -0.79866986 -0.50375053  2.31559832 -0.69220912  0.49335047 -0.05760147\n[37]  1.82420830  0.08005964 -0.63140930 -1.51328812 -0.63609983  0.22630153\n[43]  1.01369035 -1.17194831  0.66871433 -1.65010093 -0.36585225 -0.31611833\n[49] -1.94824605  0.92005752 -0.62287159 -0.17827861  0.78695133 -0.58054783\n[55]  0.91825114\n```\n\n\n:::\n:::\n\n\nIf we wanted to add the information in a tibble, we could add it during the run and use `bind_rows()` afterwards.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na_list <- vector(mode = \"list\", length = 10L)\n\nfor (i in seq_along(a_list)) {\n  len <- sample(1:10, 1)\n  a_list[[i]] <- list(\n    run = i,\n    values = rnorm(len)\n  )\n}\n\ndf <- a_list |> \n  bind_rows()\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 55 × 2\n     run  values\n   <int>   <dbl>\n 1     1  0.700 \n 2     1 -1.20  \n 3     1 -0.499 \n 4     2  0.0976\n 5     3 -0.119 \n 6     3  2.39  \n 7     3  0.735 \n 8     3  0.474 \n 9     3 -0.234 \n10     3 -0.854 \n# ℹ 45 more rows\n```\n\n\n:::\n:::\n\n\n##### Unknown sequence length\n\nSometimes, you also do not know how long your input sequence is. Instead, you want to loop until a certain condition is met. This is for instance the case when looping across multiple pages in web-scraping. Here, `while` loops come in handy (but this is the only use case I could think of).\n\nThe basic structure of `while loops` is as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhile (condition) {\n  code\n}\n```\n:::\n\n\nWhat could an example look like?[^catch-up-4] The following loop keeps running until three heads appeared in a row and the condition is met.\n\n[^catch-up-4]: I have taken this example from the R for Data Science book. I hardly ever work with `while loops`. The only use case from my day-to-day work is web-scraping, where I want to loop over pages until a certain threshold is reached. Therefore, I could not really come up with an example myself.\n\nPlease note that both vectors which are to be modified within the loop -- `indicator` and `head` -- need to be created beforehand. If I had not created `head` beforehand, the loop would not have started because there would not have been any vector to assess the length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindicator <- 0\nhead <- c()\nwhile (length(head) < 3) {\n  if (sample(2, 1) == 1) {\n    x <- \"head\"\n  } else {\n    x <- \"tail\"\n  }\n  if (x == \"head\") {\n    head <- c(head, 1)\n  } else {\n    length(head) <- 0\n  }\n  indicator <- indicator + 1\n}\n```\n:::\n\n\nIn this case, you still want to pre-allocate space. Hence, you could also use a list here. You can just do a very long list and afterwards cut it down to size using `purrr::compact()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindicator <- 0\nvalues <- vector(mode = \"list\", length = 1000)\nhead <- c()\nwhile (length(head) < 3) {\n  if (sample(2, 1) == 1) {\n    x <- \"head\"\n  } else {\n    x <- \"tail\"\n  }\n  if (x == \"head\") {\n    head <- c(head, 1)\n  } else {\n    length(head) <- 0\n  }\n  values[[indicator + 1]] <- x\n  indicator <- indicator + 1\n}\n\nlength(values)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1000\n```\n\n\n:::\n\n```{.r .cell-code}\nvalues |> tail(5) #last 5 values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\n\n[[5]]\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\nvalues |> compact() #removes all NULL elements\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"tail\"\n\n[[2]]\n[1] \"head\"\n\n[[3]]\n[1] \"head\"\n\n[[4]]\n[1] \"tail\"\n\n[[5]]\n[1] \"head\"\n\n[[6]]\n[1] \"head\"\n\n[[7]]\n[1] \"head\"\n```\n\n\n:::\n:::\n\n\n#### purrr::map()\n\nLoops are good because they make everything very explicit. However, it is often tedious to type. The `purrr` package provides functions which enable you to iterate over vectors, data frames/tibbles, and lists. Apart from that, it has a lot of functions to work with lists as well. I will only cover the former functions. If you are interested in using `purrr` for working with lists, check out [this extensive tutorial by Jenny Bryan](https://jennybc.github.io/purrr-tutorial/).\n\nIn the beginning of this chapter, I used the `walk()` function. This function is related to `map()` as it iterates over a vector and applies a function to its respective elements. The difference is that `walk()` doesn't store the results, `map()` does.\n\n##### The basics\n\nThe structure of the `map()` function looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(vector or list, function(, if you need it, additional arguments of function))\n```\n:::\n\n\n`map()` always returns a list.\n\nIf you want the output to be in a different format, there are different, type-specific `map()` functions.\n\n-   `map_dfr()` returns a data frame -- by binding the rows\n-   `map_dfc()` returns a data frame -- by binding the columns\n-   `map_dbl()` returns a double vector\n-   `map_chr()` returns a character vector\n-   `map_lgl()` returns a logical vector\n\nIn the following I will demonstrate the function of `map()` with a simple example. The basic vector I will map over is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_dbl <- c(1.5, 1.3, 1.8, 1.9, 2.3)\n```\n:::\n\n\nIn the first example, I just add 10 to the vector. In order to do so, I first need to create a function which adds 10.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_10 <- function(x) {\n  x + 10\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(example_dbl, add_10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 11.5\n\n[[2]]\n[1] 11.3\n\n[[3]]\n[1] 11.8\n\n[[4]]\n[1] 11.9\n\n[[5]]\n[1] 12.3\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dbl(example_dbl, add_10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11.5 11.3 11.8 11.9 12.3\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_chr(example_dbl, add_10) # does not make sense though\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Automatic coercion from double to character was deprecated in purrr 1.0.0.\nℹ Please use an explicit call to `as.character()` within `map_chr()` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"11.500000\" \"11.300000\" \"11.800000\" \"11.900000\" \"12.300000\"\n```\n\n\n:::\n:::\n\n\n##### Anonymous functions\n\nIn the former example, I did specify the function beforehand. `map()` also allows you to define the function within the call using a so-called anonymous function `\\(x)`. The function's argument is pre-defined (x in this case, but could be any placeholder) which stands for the respective input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dbl(example_dbl, \\(x){\n  x + 10\n  })\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11.5 11.3 11.8 11.9 12.3\n```\n\n\n:::\n:::\n\n\nYou can also map across tibbles. Here, you iterate over columns. For instance, calculating a mean for each column of the `cars_tbl` would have looked like this in `purrr`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars_tbl <- mtcars\nmap(cars_tbl, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$mpg\n[1] 20.09062\n\n$cyl\n[1] 6.1875\n\n$disp\n[1] 230.7219\n\n$hp\n[1] 146.6875\n\n$drat\n[1] 3.596563\n\n$wt\n[1] 3.21725\n\n$qsec\n[1] 17.84875\n\n$vs\n[1] 0.4375\n\n$am\n[1] 0.40625\n\n$gear\n[1] 3.6875\n\n$carb\n[1] 2.8125\n```\n\n\n:::\n:::\n\n\nWhen I put it into a tibble, names are preserved:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dfc(cars_tbl, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 11\n    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1  20.1  6.19  231.  147.  3.60  3.22  17.8 0.438 0.406  3.69  2.81\n```\n\n\n:::\n:::\n\n\n##### Mapping over multiple arguments\n\nSometimes you want to apply things to multiple arguments. Think for example of the `sample()`function. It requires at least two arguments: the size of the sample you draw and the element space `x` you draw the sample from.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2(10, 1:5, sample, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 4\n\n[[2]]\n[1]  1 10\n\n[[3]]\n[1]  7  6 10\n\n[[4]]\n[1] 1 6 6 6\n\n[[5]]\n[1] 7 5 5 5 6\n```\n\n\n:::\n:::\n\n\nHowever, the `map2()` functions do not provide you with the possibility to control the type of output you get. You can take care of this using `flatten_*()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2(10, 5, sample) |> flatten_dbl()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 4 8 3 2\n```\n\n\n:::\n:::\n\n\nIf you provide it with a vector which is longer than 1, `map2()` will not perform the operation on every possible combination of the two vectors. Instead, it iterates over both vectors simultaneously, hence, the first iteration uses the first two values, the second iteration the second two values etc. Also note that it matches the arguments by position, not by name, hence the second argument is the size of the sample, the first one the element space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2(c(10, 5), c(5, 3), sample) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1]  7  8  4  5 10\n\n[[2]]\n[1] 1 3 5\n```\n\n\n:::\n:::\n\n\nIf you want to use an anonymous function, you can do so as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap2(c(10, 5), c(5, 3), \\(x, y) sample(x, size = y))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 4 8 6 7 2\n\n[[2]]\n[1] 5 1 3\n```\n\n\n:::\n:::\n\n\nIf you want to map over more than two arguments, `pmap()` is the way to go. If you work with functions which need multiple values as arguments, you can store the vectors containing the respective values in a tibble. You should name the columns according to the function's arguments.\n\nAn example here is drawing numbers from a normal distribution -- `rnorm()`. The function takes three arguments: `n`-- the number of values to be drawn, `mean`, and `sd`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  n = 10,\n  mean = 1:10,\n  sd = 0.5\n) |> \n  pmap(rnorm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n [1] 0.2762588 1.2662280 0.4966849 1.3585467 0.7492659 0.7907689 0.3105248\n [8] 1.1213886 1.4226768 0.1782507\n\n[[2]]\n [1] 2.509489 2.476223 2.410380 2.813266 2.116919 2.392606 1.324271 1.782913\n [9] 1.659243 2.718527\n\n[[3]]\n [1] 3.433201 2.123642 2.645378 3.158825 3.418090 4.271263 3.200257 3.017893\n [9] 3.141365 2.606872\n\n[[4]]\n [1] 3.914835 4.595926 4.682905 3.619700 3.513134 4.954899 3.123541 4.477846\n [9] 5.167031 4.550836\n\n[[5]]\n [1] 5.545990 5.142692 4.220136 5.427874 5.213967 4.856378 4.899412 5.450255\n [9] 3.873000 4.740156\n\n[[6]]\n [1] 5.818541 6.971764 6.147575 6.582609 6.121836 6.226723 6.257705 5.418025\n [9] 5.531128 6.076174\n\n[[7]]\n [1] 6.859280 6.594688 6.866800 7.426123 6.291120 6.845510 7.212836 6.980094\n [9] 6.177029 7.468289\n\n[[8]]\n [1] 8.743606 8.803838 8.125447 8.136227 8.075560 8.486074 8.504599 7.792865\n [9] 7.557125 8.727168\n\n[[9]]\n [1] 8.815799 9.599489 9.429286 9.243450 8.937363 9.010900 8.082863 9.765383\n [9] 9.820104 8.174236\n\n[[10]]\n [1] 10.015095  9.715463 10.305483 10.754284  9.661376 10.500636 10.617799\n [8] 10.823392  9.387472  9.728401\n```\n\n\n:::\n:::\n\n\nIf you want to use an anonymous function, you can do so as well:\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  n = 10,\n  mean = 1:10,\n  sd = 0.5\n) |> \n  pmap(\\(n, mean, sd) rnorm(n, mean, sd))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n [1] 0.7772323 0.0416125 0.9735931 0.9834894 1.0114624 0.3249466 1.0569058\n [8] 1.3214937 1.1249126 0.9573270\n\n[[2]]\n [1] 1.4034810 2.1781413 2.0860438 2.9868643 1.4047264 1.5553486 1.5861139\n [8] 1.3575352 1.3621371 0.7242431\n\n[[3]]\n [1] 4.093959 2.798665 4.107978 1.874788 3.051627 3.409510 3.433766 3.728983\n [9] 2.355771 2.556102\n\n[[4]]\n [1] 2.433150 4.199967 4.212392 4.328054 4.488375 4.602977 4.691167 4.146277\n [9] 4.189498 4.097553\n\n[[5]]\n [1] 5.140349 5.092283 4.738515 5.529182 4.269838 5.013457 4.620869 4.823738\n [9] 4.207710 4.723280\n\n[[6]]\n [1] 6.245906 5.058408 5.516441 5.472807 6.025419 5.685291 6.462158 6.550718\n [9] 6.566605 5.717003\n\n[[7]]\n [1] 7.087744 6.923719 6.899486 6.571321 7.224902 6.843166 7.430276 6.926348\n [9] 6.838748 6.860724\n\n[[8]]\n [1] 8.402492 7.871721 7.946986 8.426621 8.797195 8.227491 7.582142 8.157361\n [9] 8.107146 7.558428\n\n[[9]]\n [1] 9.694184 9.786892 9.286632 9.995288 8.535659 9.185741 8.114063 9.860151\n [9] 8.876233 8.891865\n\n[[10]]\n [1] 10.696122 11.047684 10.039567 10.655035  9.739268  9.559926  9.317054\n [8] 10.097944  9.665217 10.051768\n```\n\n\n:::\n:::\n\n\n##### Speeding up with `furrr`\n\nIf you work with large data sets or have to perform a lot of iterations, you might want to speed up your code. The `furrr` package provides the same functionality as `purrr`, but allows for parallelization. This means that it can split up the tasks and distribute them across multiple CPU cores.\n\nIts functionalities are the same as in `purrr`, just with a `future_` prefix. In order to use it, you need to set up a plan first. Here, I use `multisession`, which works on all platforms (Windows, Mac, Linux). If you work on a Linux machine, you can also use `multicore`, which is faster.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneeds(furrr)\nplan(multisession) #set up parallelization\nfuture_map_dbl(example_dbl, add_10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11.5 11.3 11.8 11.9 12.3\n```\n\n\n:::\n:::\n\n\nNote that speed benefits are not apparent when working with small data sets or few iterations. The overhead of setting up parallel processes can outweigh the benefits. However, if you work with large data sets or have to perform a lot of iterations, you will see a speed increase.\n\nLet's make `add_10` slow and benchmark `furrr` and `purrr` using the `tictoc` package. I have set the sleep time to 0.5 seconds to make the difference more apparent. My laptop has 8 cores, hence I create 24 tasks which will be distributed across the 8 workers (3 tasks per worker).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneeds(tictoc)\n\n# Create more tasks than workers\nexample_long <- 1:24 \n\nadd_10_slow <- function(x) {\n  Sys.sleep(0.5)  # Shorter sleep time\n  x + 10\n}\n\n# Sequential version\ntic(\"Sequential (purrr)\")\nresult_seq <- map_dbl(example_long, add_10_slow)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSequential (purrr): 12.084 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Parallel version\ntic(\"Parallel (furrr)\")\nresult_par <- future_map_dbl(example_long, add_10_slow)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParallel (furrr): 2.993 sec elapsed\n```\n\n\n:::\n:::\n\n\nYou can see that the parallel version is much faster than the sequential one. However, the speed increase is not linear. This is due to the overhead of setting up parallel processes. Setting up worker processes, transferring data between them, and collecting results all take time. With my 0.5 second tasks, this overhead becomes a significant fraction of the total runtime. Also, following Amdahl's Law, not everything can be parallelized. Some parts like initial setup and final result collection must run sequentially. This creates a fundamental limit on speedup. Finally, there are system constraints, as my CPU shares resources with other processes, memory bandwidth can become a bottleneck, and modern CPUs can't maintain peak single-core performance across all cores simultaneously.\n\nSo, when should we use `furrr`?\n\n-   When you have a large number of tasks that can be executed independently.\n-   When each task takes a significant amount of time to complete.\n-   When you have access to a multi-core machine.\n\nWhen should we avoid `furrr`?\n\n-   When tasks are very quick to execute (the overhead of parallelization may outweigh the benefits).\n-   When tasks depend on each other (parallelization won't help).\n-   When working in an environment where parallel processing is restricted (e.g., some cloud services or shared servers).\n-   When debugging (parallel code can be harder to debug).\n\n#### Further links\n\n-   [Chapter about loops in Hands-on Programming with R](https://rstudio-education.github.io/hopr/loops.html#for-loops)\n-   On [control flow](https://resbaz.github.io/2014-r-materials/lessons/30-control-flow/)\n-   A [basic introduction to `purrr::map`](http://www.rebeccabarter.com/blog/2019-08-19_purrr/)\n-   The [corresponding chapter in R4DS](https://r4ds.had.co.nz/iteration.html#introduction-14)\n",
    "supporting": [
      "2_r_catch-up_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}