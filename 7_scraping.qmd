---
title: "Chapter 7: Crawling the Web and Extracting Data (Static Pages with `rvest`)"
published-title: crawling_extracting
engine: knitr
freeze: auto
bibliography: literature.bib
csl: ASA.csl
---

## Intro 

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("Yg0wUkHjigs")
```

Today's session will be dedicated to getting data from the web. This process is also called scraping since we scrape data off from the surface (and remodel it for our purposes). The following picture shows you the [web scraping cheat sheet](https://github.com/yusuzech/r-web-scraping-cheat-sheet/) that outlines the process of scraping the web. On the left side, you can see the first step in scraping the web which is requesting the information from the server. This is basically what is going under the hood when you make requests using a browser. The response is the website, usually stored in an XML document, which is then the starting point for your subsequent queries and data extraction.

![Web scraping cheat sheet](https://raw.githubusercontent.com/yusuzech/r-web-scraping-cheat-sheet/master/resources/functions_and_classes.png)

In the first part of this chapter, you will learn different techniques to get your hands on data. In particular, this will encompass making simple URL requests with `read_html()`, using `session()`s to navigate around on a web page, and submitting `html_form()`s to fill in forms on a web page. The second part will be dedicated to only choosing particular contents of the page. 

## Getting started with `rvest`

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("NZsULhv0lmE")
```

### Making requests

The most basic form of making a request is by using `read_html()` from the `xml2` package.

```{r message=FALSE, warning=FALSE}
needs(httr, rvest, tidyverse)

page <- read_html("https://en.wikipedia.org/wiki/Tidyverse")

page |> str()

page |> as.character() |> write_lines("wiki.html")

#page |> html_text()
```

This is perfectly fine for making requests to static pages where you do not need to take any further action. Sometimes, however, this is not enough, and you want to accept cookies or move on the page.

### `session()`s

However, the slickest way to do this is by using a `session()`. In a session, R behaves like a normal browser, stores cookies, allows you to navigate between pages, by going `session_forward()` or `session_back()`, `session_follow_link()`s on the page itself or `session_jump_to()` a different URL, or submit `form()`s with `session_submit()`.

First, you start the session by simply calling `session()`.

```{r}
my_session <- session("https://scrapethissite.com/")
```

Some servers may not want robots to make requests and block you for this reason. To circumnavigate this, we can set a "user agent" in a session. The user agent contains data that the server receives from us when we make the request. Hence, by adapting it we can trick the server into thinking that we are humans instead of robots. Let's check the current user agent first:

```{r}
my_session$response$request$options$useragent
```

Not very human. We can set it to a common one using the `httr` package (which powers `rvest`).

```{r}
user_a <- user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36")
session_with_ua <- session("https://scrapethissite.com/", user_a)
session_with_ua$response$request$options$useragent
```

You can check the response using `session$response$status_code` -- 200 is good.

```{r}
my_session$response$status_code
```

When you want to save a page from the session, do so using `read_html()`.

```{r}
page <- read_html(session_with_ua)
```

If you want to open a new URL, use `session_jump_to()`.

```{r}
session_with_ua <- session_with_ua |> 
  session_jump_to("https://www.scrapethissite.com/pages/")
session_with_ua
```

You can also click buttons on the page using CSS selectors or XPATHs (more on them next session!):

```{r}
session_with_ua <- session_with_ua |> 
  session_jump_to("https://www.scrapethissite.com/") |> 
  session_follow_link(css = ".btn-primary")

session_with_ua
```

Wanna go back -- `session_back()`; thereafter you can go `session_forward()`, too.

```{r}
session_with_ua <- session_with_ua |> 
  session_back()

session_with_ua

session_with_ua <- session_with_ua |> 
  session_forward()

session_with_ua
```

You can look at what your scraper has done with `session_history()`.

```{r}
session_with_ua |> session_history()
```

### Exercise

1.  Start a session with the tidyverse Wikipedia page. Adapt your user agent to some sort of different value. Proceed to Hadley Wickham's page. Go back. Go forth. Jump to Pierre Bourdieu's Wikipedia page. Check the `session_history()` to see if it has worked.

<details>
  <summary>Solution. Click to expand!</summary>
```{r eval=FALSE}
needs(tidyverse, rvest, httr)
tidyverse_wiki <- "https://en.wikipedia.org/wiki/Tidyverse"
pierre_wiki <- "https://en.wikipedia.org/wiki/Pierre_Bourdieu"
user_agent <- user_agent("Hi, I'm Felix and I'm trying to steal your data.") #can be changed
```

```{r eval=FALSE}
wiki_session <- session(tidyverse_wiki, user_agent)

wiki_session_jumped <- wiki_session |>  
  session_jump_to(tidyverse_wiki) |> 
  session_back() |> 
  session_forward() |> 
  session_jump_to(pierre_wiki)

wiki_session_jumped |> session_history()
```

</details>

### Forms

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("KA4RGlL1jjE")
```

Sometimes we also want to provide certain input, e.g., to provide login credentials or to scrape a website more systematically. That information is usually provided using so-called [forms](https://www.w3schools.com/html/html_forms.asp). A `<form>` element can contain different other elements such as text fields or check boxes. Basically, we use `html_form()` to extract the form, `html_form_set()` to define what we want to submit, and `html_form_submit()` to finally submit it. [For a basic example, we search for something on Google.](https://rvest.tidyverse.org/reference/html_form.html)

```{r message=FALSE, warning=FALSE}
google <- read_html("http://www.google.com")
search <- html_form(google) |> pluck(1)

search |> str()

search_something <- search |> html_form_set(q = "something")
resp <- html_form_submit(search_something, submit = "btnG")
read_html(resp)

vals <- list(q = "web scraping", hl = "fr")

search_1 <- search |> html_form_set(!!!vals)
search_2 <- search |> html_form_set(q = "web scraping", hl = "fr")

resp <- html_form_submit(search_1)
read_html(resp)
```

If you are working with a session, the workflow is as follows:

1.  Extract the form.
2.  Set it.
3.  Start your session on the page with the form.
4.  Submit the form using `session_submit()`.

```{r}
google_form <- read_html("http://www.google.com") |> 
  html_form() |> 
  pluck(1) #another way to do [[1]]

search_something <- google_form |> html_form_set(q = "something")

google_session <- session("http://www.google.com") |> 
  session_submit(search_something, submit = "btnG")

google_session |> 
  read_html()
```

### Exercise

2.  Start a session on "https://www.scrapethissite.com/pages/forms/", fill out, and submit the form to search for a Hockey team called Toronto Maple Leafs. Store the resulting output in "base_session". 

You can check your code by looking at the output of `base_session |> read_html() |> html_table() |> pluck(1)` and checking whether there are only Maple Leaf entries.

<details>
  <summary>Solution. Click to expand!</summary>
```{r eval=FALSE}
url <- "https://www.scrapethissite.com/pages/forms/"

search_form <- read_html(url) |> 
  html_form() |> 
  pluck(1) #extract 

set_form <- search_form |> 
  html_form_set(q = "Toronto Maple Leafs") #set login form 

base_session <- session(url) |> 
  session_submit(set_form) 



base_session |> 
  read_html() |> 
  html_table() |> 
  pluck(1)
```

</details>

### Scraping hacks

Some web pages are a bit fancier than the ones we have looked at so far (i.e., they use JavaScript). `rvest` works nicely for static web pages, but for more advanced ones you need different tools such as `selenium` -- see chapter 7.

A web page may sometimes give you time-outs (i.e., it doesn't respond within a given time). This can break your loop. Wrapping your code in `safely()` or `insistently()` from the `purrr` package might help. The former moves on and notes down what has gone wrong, the latter keeps sending requests until it has been successful. They both work easiest if you put your scraping code in functions and wrap those with either [`insistently()`](https://purrr.tidyverse.org/reference/insistently.html) or [`safely()`](https://purrr.tidyverse.org/reference/safely.html).

Sometimes a web page keeps blocking you. Consider using a proxy server.

```{r eval=FALSE}
my_proxy <- httr::use_proxy(url = "http://example.com",
                            user_name = "myusername",
                            password = "mypassword",
                            auth = "one of basic, digest, digest_ie, gssnegotiate, ntlm, any")

my_session <- session("https://scrapethissite.com/", my_proxy)
```

Find more useful information -- including the stuff we just described -- and links on [this GitHub page](https://github.com/yusuzech/r-web-scraping-cheat-sheet/blob/master/README.md).

## Extracting Data

In the prior section you learned how to make calls to web pages and get responses. Now it will be all about how you can extract content from web pages in a structured way. The (in our opinion) easiest way to achieve that is by harnessing the way the web is written.

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("U6aJoeR6_nA")
```

Before we start to extract data from the web, we will briefly touch upon how the web is written. This is since we will harness this structure to extract content in an automated manner. Basic commands will be shown thereafter.

```{r}
#install.packages("needs")
needs::needs(janitor, polite, rvest, tidyverse)
```

## HTML 101

Web content is usually written in HTML (**H**yper **T**ext **M**arkup **L**anguage). An HTML document is comprised of elements that are letting its content appear in a certain way.

![The tree-like structure of an HTML document](https://www.w3schools.com/js/pic_htmltree.gif)

The way these elements look is defined by so-called tags.

![](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-small.png)

The opening tag is the name of the element (`p` in this case) in angle brackets, and the closing tag is the same with a forward slash before the name. `p` stands for a paragraph element and would look like this (since RMarkdown can handle HTML tags, the second line will showcase how it would appear on a web page):

`<p> My cat is very grumpy. <p/>`

<p>

My cat is very grumpy.

<p/>

The `<p>` tag makes sure that the text is standing by itself and that a line break is included thereafter:

`<p>My cat is very grumpy</p>. And so is my dog.` would look like this:

<p>My cat is very grumpy</p>

. And so is my dog.

There do exist many types of tags indicating different kinds of elements (about 100). Every page's content must be in an `<html>` element with two children `<head>` and `<body>`. The former contains the page title and some metadata, the latter the contents you are seeing in your browser. So-called **block tags**, e.g., `<h1>` (heading 1), `<p>` (paragraph), or `<ol>` (ordered list), structure the page. **Inline tags** (`<b>` -- bold, `<a>` -- link) format text inside block tags.

You can nest elements, e.g., if you want to make certain things bold, you can wrap text in `<b>`:

`<p>My cat is <b> very </b> grumpy</p>`

<p>My cat is <b> very </b> grumpy</p>

Then, the `<b>` element is considered the *child* of the `<p>` element.

Elements can also bear attributes:

![](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-attribute-small.png)

Those attributes will not appear in the actual content. Moreover, they are super-handy for us as scrapers. Here, `class` is the attribute name and `"editor-note"` the value. Another important attribute is `id`. Combined with CSS, they control the appearance of the element on the actual page. A `class` can be used by multiple HTML elements whereas an `id` is unique.

## Extracting content in `rvest`

To scrape the web, the first step is to simply read in the web page. `rvest` then stores it in the XML format -- just another format to store information. For this, we use `rvest`'s `read_html()` function.

To demonstrate the usage of CSS selectors, I create my own, basic web page using the `rvest` function `minimal_html()`:

```{r message=FALSE, warning=FALSE}
basic_html <- minimal_html('
  <html>
  <head>
    <title>Page title</title>
  </head>
  <body>
    <h1 id="first">A heading</h1>
    <p class="paragraph">Some text &amp; <b>some bold text.</b></p>
    <a> Some more <i> italicized text which is not in a paragraph. </i> </a>
    <a class="paragraph">even more text &amp; <i>some italicized text.</i></p>
    <a id="link" href="www.nyt.com"> The New York Times </a>
  </body>
')

basic_html

#https://htmledit.squarefree.com
```

CSS is the abbreviation for cascading style sheets and is used to define the visual styling of HTML documents. CSS selectors map elements in the HTML code to the relevant styles in the CSS. Hence, they define patterns that allow us to easily select certain elements on the page. CSS selectors can be used in conjunction with the `rvest` function `html_elements()` which takes as arguments the read-in page and a CSS selector. Alternatively, you can also provide an XPath which is usually a bit more complicated and will not be covered in this tutorial.

-   `p` selects all `<p>` elements.

```{r}
basic_html |> html_elements(css = "p")
```

-   `.title` selects all elements that are of `class` "title"

```{r}
basic_html |> html_elements(css = ".title")
```

There are no elements of `class` "title". But some of `class` "paragraph".

```{r}
basic_html |> html_elements(css = ".paragraph")
```

-   `p.paragraph` analogously takes every `<p>` element which is of `class` "paragraph".

```{r}
basic_html |> html_elements(css = "p.paragraph")
```

-   `#link` scrapes elements that are of `id` "link"

```{r}
basic_html |> html_elements(css = "#link")
```

You can also connect children with their parents by using the combinator. For instance, to extract the italicized text from "a.paragraph," I can do "a.paragraph i".

```{r}
basic_html |> html_elements(css = "a.paragraph i")
```

You can also look at the children by using `html_children()`:

```{r}
basic_html |> html_elements(css = "a.paragraph") |> html_children()

read_html("https://rvest.tidyverse.org") |> 
  html_elements("#installation , p")
```

Unfortunately, web pages in the wild are usually not as easily readable as the small example one I came up with. Hence, I would recommend you to use the [SelectorGadget](javascript:(function()%7Bvar%20s=document.createElement('div');s.innerHTML='Loading...';s.style.color='black';s.style.padding='20px';s.style.position='fixed';s.style.zIndex='9999';s.style.fontSize='3.0em';s.style.border='2px%20solid%20black';s.style.right='40px';s.style.top='40px';s.setAttribute('class','selector_gadget_loading');s.style.background='white';document.body.appendChild(s);s=document.createElement('script');s.setAttribute('type','text/javascript');s.setAttribute('src','https://dv0akt2986vzh.cloudfront.net/unstable/lib/selectorgadget.js');document.body.appendChild(s);%7D)();) -- just drag it into your bookmarks list.

Its usage could hardly be simpler:

1.  Activate it -- i.e., click on the bookmark.
2.  Click on the content you want to scrape -- the things the CSS selector selects will appear green.
3.  Click on the green things that you don't want -- they will turn red; click on what's not green yet but what you want -- it will turn green.
4.  copy the CSS selector the gadget provides you with and paste it into the `html_elements()` function.

```{r}
read_html("https://en.wikipedia.org/wiki/Hadley_Wickham") |> 
  html_elements(css = "p:nth-child(4)") |> 
  html_text()
```

## Tying it Together: Scraping HTML pages with `rvest`

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("1n6Iq_16UNA")
```

So far, I have shown you how HTML is written and how to select elements. However, what we want to achieve is extracting the data the elements contained in a proper format and storing it in some sort of tibble. Therefore, we need functions that allow us to grab the data.

The following overview taken from the [web scraping cheatsheet](https://github.com/yusuzech/r-web-scraping-cheat-sheet) shows you the basic "flow" of scraping web pages plus the corresponding functions. In this tutorial, I will limit myself to `rvest` functions. Those are of course perfectly compatible with things, for instance, `RSelenium`, as long as you feed the content in XML format (i.e., by using `read_html()`).

![](https://raw.githubusercontent.com/yusuzech/r-web-scraping-cheat-sheet/master/resources/functions_and_classes.png)

In the prior chapter, I have introduced you to acquiring the contents of singular pages. Given that you now know how to choose the content you want, all that you are lacking for successful scraping is the tools to extract these contents in a proper format.

### `html_text()` and `html_text2()`

Extracting text from HTML is easy. You use `html_text()` or `html_text2()`. The former is faster but will give you not-so-nice results. The latter will give you the text like it would be returned in a web browser.

The following example is taken from [the documentation](https://rvest.tidyverse.org/reference/html_text.html)

```{r}
# To understand the difference between html_text() and html_text2()
# take the following html:

html <- minimal_html(
  "<p>This is a paragraph.
    This is another sentence.<br>This should start on a new line<p/>"
)
```

```{r}
# html_text() returns the raw underlying text, which includes white space
# that would be ignored by a browser, and ignores the <br>
html |> html_element("p") |> html_text() |> writeLines()
```

```{r}
# html_text2() simulates what a browser would display. Non-significant
# white space is collapsed, and <br> is turned into a line break
html |> html_element("p") |> html_text2() |> writeLines()
```

A "real example" would then look like this:

```{r}
us_senators <- read_html("https://en.wikipedia.org/wiki/List_of_current_United_States_senators")
text <- us_senators |>
  html_elements(css = "p:nth-child(6)") |> 
  html_text2()
```

### Extracting tables

The general output format we strive for is a tibble. Oftentimes, data is already stored online in a table format, basically ready for us to analyze them. In the next example, I want to get a table from the Wikipedia page that contains the senators of different States in the United States I have used before. For this first, basic example, I do not use selectors for extracting the right table. You can use `rvest::html_table()`. It will give you a list containing all tables on this particular page. We can inspect it using `str()` which returns an overview of the list and the tibbles it contains.

```{r}
tables <- us_senators |> 
  html_table()

str(tables)
```

Here, the table I want is the sixth one. We can grab it by either using double square brackets -- `[[6]]` -- or `purrr`'s `pluck(6)`.

```{r message=FALSE, warning=FALSE}
senators <- tables |> 
  pluck(6)

glimpse(senators)

## alternative approach using css
senators <- us_senators |> 
  html_elements(css = "#senators") |> 
  html_table() |> 
  pluck(1) |> 
  janitor::clean_names()
```

You can see that the tibble contains "dirty" names and that the party column appears twice -- which will make it impossible to work with the tibble later on. Hence, I use `clean_names()` from the `janitor` package to fix that.

### Extracting attributes

You can also extract attributes such as links using `html_attrs()`. An example would be to extract the headlines and their corresponding links from r-bloggers.com.

```{r}
rbloggers <- read_html("https://www.r-bloggers.com")
```

A quick check with the SelectorGadget told me that the element I am looking for is of class ".loop-title" and the child of it is "a", standing for normal text. With `html_attrs()` I can extract the attributes. This gives me a list of named vectors containing the name of the attribute and the value:

```{r include=FALSE}
r_blogger_postings <- rbloggers |> html_elements(css = ".loop-title a")

r_blogger_postings |> html_attrs()
```

Links are stored as attribute "href" -- hyperlink reference. `html_attr()` allows me to extract the attribute's value. Hence, building a tibble with the article's title and its corresponding hyperlink is straight-forward now:

```{r}
tibble(
  title = r_blogger_postings |> html_text2(),
  link = r_blogger_postings |> html_attr(name = "href")
)
```

Another approach for this would be using the `polite` package and its function `html_attrs_dfr()` which binds together all the different attributes column-wise and the different elements row-wise.

```{r message=FALSE, warning=FALSE}
rbloggers |> 
  html_elements(css = ".loop-title a") |> 
  html_attrs_dfr() |> 
  select(title = 3, 
         link = 1) |> 
  glimpse()
```

### Exercise

3.  Download the links and names of the [top 250 IMDb movies](https://www.imdb.com/chart/top/). Put them in a tibble with the columns `rank` -- in numeric format (you know regexes already), `title`, `url` to IMDb entry, `rating` -- in numeric format, `number_votes` -- the number of votes a movie has received, in numeric format. Also, what do you notice?

<details>
  <summary>Solution. Click to expand!</summary>
```{r}
imdb_top250 <- read_html("https://www.imdb.com/chart/top/?ref_=nv_mv_250")

movies <- tibble(
  rank = imdb_top250 |> 
    html_elements(".cli-title .ipc-title__text") |> 
    html_text2() |> 
    str_extract("^[0-9]+(?=\\.)") |> 
    parse_integer(),
  title = imdb_top250 |> 
    html_elements(".cli-title .ipc-title__text") |> 
    html_text2() |> 
    str_remove("^[0-9]+\\. "),
  url = imdb_top250 |> 
    html_elements(".cli-title a") |> 
    html_attr("href") |> 
    str_c("https://www.imdb.com", x = _),
  rating = imdb_top250 |> 
    html_elements(".ratingGroup--imdb-rating") |> 
    html_text() |> 
    str_extract("[0-9]\\.[0-9]") |> 
    parse_double(),
  no_votes = imdb_top250 |> 
    html_elements(".ratingGroup--imdb-rating") |> 
    html_text() |> 
    str_remove("^[0-9]\\.[0-9]") |> 
    str_remove_all("[() ]")
)
```
</details>


## Automating scraping

Well, grabbing singular points of data from websites is nice. However, if you want to do things such as collecting large amounts of data or multiple pages, you will not be able to do this without some automation.

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("C8LHWqfIvH4")
```

An example here would again be the R-bloggers page. It provides you with plenty of R-related content. If you were now eager to scrape all the articles, you would first need to acquire all the different links leading to the blog postings. Hence, you would need to navigate through the site's pages first to acquire the links.

In general, there are two ways to go about this. The first is to manually create a list of URLs the scraper will visit and take the content you need, therefore not needing to identify where it needs to go next. The other one would be automatically acquiring its next destination from the page (i.e., identifying the "go on" button). Both strategies can also be nicely combined with some sort of `session()`.

### Looping over pages

For the first approach, we need to check the URLs first. How do they change as we navigate through the pages?

```{r}
url_1 <- "https://www.r-bloggers.com/page/2/"
url_2 <- "https://www.r-bloggers.com/page/3/"

initial_dist <- adist(url_1, url_2, counts = TRUE) |> 
  attr("trafos") |> 
  diag() |> 
  str_locate_all("[^M]")

  
str_sub(url_1, start = initial_dist[[1]][1]-5, end = initial_dist[[1]][1]+5) # makes sense for longer urls
str_sub(url_2, start = initial_dist[[1]][1]-5, end = initial_dist[[1]][1]+5)
```

There is some sort of underlying pattern and we can harness that. `url_1` refers to the second page, `url_2` to the third. Hence, if we just combine the basic URL and, say, the numbers from 1 to 10, we could then visit all the pages (exercise 3a) and extract the content we want.

```{r}
urls <- str_c("https://www.r-bloggers.com/page/", 1:10, "/") # this is the stringr equivalent of paste()
urls
```

You can run this in a for-loop, here's a quick revision. For the loop to run efficiently, space for every object should be pre-allocated (i.e., you create a list beforehand, and its length can be determined by an educated guess).

```{r eval=FALSE}
## THIS IS PSEUDO CODE!!!
result_list <- vector(mode = "list", length = length(urls)) # pre-allocate space!!!
starting_link <- "https://www.r-bloggers.com/page/1/"
####PSEUDO CODE!!!
for (i in seq_along(urls)){
  read in urls[[i]] --> page <- read_html(url)
  store content of page in result_list result_list[[i]] <- extract_content(page)
}
```

### Letting the scraper navigate on its own

Extracting the link on the fly is the same thing, but in the end, you need to replace the link argument with the one you extracted. You will do this in exercise 3. It is probably easiest to perform those things in a `while` loop, hence here is a quick revision:

Hence, our `while` loop in pseudo-code will look like this:

```{r eval=FALSE}
## THIS IS PSEUDO CODE!!!
output_list <- vector(mode = "list", length = 10L)
i <- 0
while (session$response$status_code == 200 && i <= 10) {
  session(start-url)
  i <- i + 1
  read in r-bloggers results list
  get all stuff and store it in output_list[[i]]
  move session to next page
}

### reminder: how to click a button in rvest

session("https://www.scrapethissite.com/") |> 
  session_follow_link(css = "#nav-lessons .nav-link") # just use selectorgadget to check for css selector of button
```

### Exercise

4.  Scrape 5 pages of the latest [UN press releases](https://press.un.org/en/content/secretary-general/press-release) in an automated fashion. Make sure to take breaks between requests by including `Sys.sleep(2)`. For each iteration, store the articles and links in a tibble containing the columns `title`,`link`, and `date` (bonus: store it in date format). (Tip: wrap the code that extracts and stores content in a tibble in a function.)

a.  Do so using running numbers in the urls.
b.  Do so by using `session()` in a loop. (Note: make sure to specify `css =`)

<details>
  <summary>Solution. Click to expand!</summary>
```{r eval=FALSE}
extract_press_releases <- function(page){
  tibble(
    title = page |> 
      html_elements(".field__item a") |> 
      html_text2(),
    link = page |> 
      html_elements(".field__item a") |> 
      html_attr("href"),
    date = page |> 
      html_elements(".field--type-datetime") |> 
      html_text2() |> 
      as.Date(format = "%d %B %Y")
  )
  
}


#a
urls <- str_c("https://press.un.org/en/content/secretary-general/press-release?page=", 0:4)

pages <- map(urls, 
             \(x){
               Sys.sleep(2) 
               read_html(x) |> 
                 extract_press_releases()
               }
             )

#b
un_session <- session("https://press.un.org/en/content/secretary-general/press-release")
i <- 1
page_list <- vector(mode = "list", length = 5L)
while (i < 6) {
  page_list[[i]] <- read_html(un_session) |> 
    extract_press_releases()
  un_session <- un_session |> 
    session_follow_link(css = ".me-s .page-link")
  i <- i + 1
  Sys.sleep(2)
}
```
</details>


## Conclusion

To sum it up: when you have a good research idea that relies on Digital Trace Data that you need to collect, ask yourself the following questions:

1. Is there some sort of data dump that I can download?
2. Is there an R package for the web service?
3.  If 1. == FALSE: Is there an API where I can get the data (if TRUE, use it) -- next chapter.
4.  If 1. == FALSE & 2. == FALSE: Is screen scraping an option and any structure in the data that you can harness?

If you have to rely on screen scraping, also ask yourself the question how you can minimize the number of requests you make to the server. Going back and forth on web pages or navigating through them might not be the best option since it requires multiple requests. The most efficient way is usually to try to get a list of URLs of some sort which you can then just loop over.

